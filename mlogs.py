import asyncio
import string
from telethon.tl.types import Message, ChatAdminRights
from telethon import functions
from asyncio import sleep
from .. import loader, utils
import re
from ..inline.types import InlineCall
import inspect


@loader.tds
class mlogs(loader.Module):
    '''–ú–æ–¥—É–ª—å –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ MineEvo'''
    strings = {
        "name" : "mlogs", 
    }
    
    async def client_ready(self):
        s = self.get('kt')
        if s == None:
            self.set('kt', True)
        
        s = self.get('rkt')
        if s == None:
            self.set('rkt', True)
        
        s = self.get('k')
        if s == None:
            self.set('k', True)

        s = self.get('rk')
        if s == None:
            self.set('rk', True)

        s = self.get('mif')
        if s == None:
            self.set('mif', True)

        if self.get("ps") == None:
            self.set('ps', True)

        if self.get('ss') == None:
            self.set('ss', True)

        s = self.get('kr')
        if s == None:
            self.set('kr', True)

        s = self.get('zv')
        if s == None:
            self.set('zv', True)

        s = self.get('tradec')
        if s == None:
            self.set('tradec', True)

        if self.get('tradei') == None:
            self.set('tradei', True)

        s = self.get('boosters')
        if s == None:
            self.set('boosters', True)

        s = self.get('bosses')
        if s == None:
            self.set('bosses', True)

        if self.get("credits") == None:
            self.set('credits', True)

        if self.get('dk') == None:
            self.set('dk', True)

        if self.get('tradett') == None:
            self.set('tradett', "<b><code>{nick}</code> –¥–∞–ª —Ç–µ–±–µ</b>:\n<i>{cases}</i>")

        if self.get('tradeis') == None:
            self.set("tradeis", "<b><code>{nick}</code> –¥–∞–ª —Ç–µ–±–µ –ø—Ä–µ–¥–º–µ—Ç</b>:\n<i>{item}")
            
        if self.get('kts') == None or "{colvo}" not in self.get('kts'):
            self.set("kts", "‚úâÔ∏è <b>–ö–æ–Ω–≤–µ—Ä—Ç <code>+{colvo}</code></b>")

        if self.get('rkts') == None or "{colvo}" not in self.get('rkts'):
            self.set('rkts', "üßß <b>–†–µ–¥–∫–∏–π –ö–æ–Ω–≤–µ—Ä—Ç <code>+{colvo}</code></b>")

        if self.get('ks') == None or "{colvo}" not in self.get('ks'):
            self.set('ks', "üì¶ <b>–ö–µ–π—Å <code>+{colvo}</code></b>")

        if self.get('rks') == None or "{colvo}" not in self.get('rks'):
            self.set('rks', "üó≥ <b>–†–µ–¥–∫–∏–π –ö–µ–π—Å <code>+{colvo}</code></b>")
        
        if self.get('mifs') == None or "{colvo}" not in self.get('mifs'):
            self.set('mifs', "<i>–ì—Ä–∞—Ü!</i>\nüïã <b>–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ö–µ–π—Å <code>+{colvo}</code>!</b>")

        if self.get('krs') == None or "{colvo}" not in self.get('krs'):
            self.set("krs", "<i>Congratulations!</i>\nüíé <b>–ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π –∫–µ–π—Å <code>+{colvo}</code>!</b>")

        if self.get("dks") == None or "{colvo}" not in self.get("dks"):
            self.set('dks', "<i>Good luck!</i>\nüé≤ <b>–ö–µ–π—Å –∫—É–±–∏–∫ <code>+{colvo}</code></b>")

        if self.get('zvs') == None or "{colvo}" not in self.get('zvs'):
            self.set('zvs', "<i>WOW, you are lucky!</i>\nüåå <b>–ó–≤–µ–∑–¥–Ω—ã–π –ö–µ–π—Å <code>+{colvo}</code></b>")

        if self.get('pss') == None or "{colvo}" not in self.get('pss'):
            self.set('pss', "<i>Luck is on your side!</i>\nüíº <b>–ü–æ—Ä—Ç—Ñ–µ–ª—å —Å –≠—Å–∫–∏–∑–∞–º–∏ <code>+{colvo}</code></b>")

        if self.get('sss') == None or "{colvo}" not in self.get('sss'):
            self.set('sss', "<i>A pleasant surprise!</i>\nüëú <b>–°—É–º–∫–∞ —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ <code>+{colvo}</code></b>")

        if self.get('boostersd1.5') == None:
            self.set('boostersd1.5', "‚ö°Ô∏è <b>–ë—É—Å—Ç –¥–µ–Ω–µ–≥ 1.5 </b><i>+1</i>")

        if self.get('boostersr1.5') == None:
            self.set('boostersr1.5', "‚ö°Ô∏è <b>–ë—É—Å—Ç —Ä—É–¥—ã 1.5 </b><i>+1</i>")
        
        if self.get('boostersd2') == None:
            self.set('boostersd2', "‚ö°Ô∏è <b>–ë—É—Å—Ç –¥–µ–Ω–µ–≥ 2.0 </b><i>+1</i>")

        if self.get('boostersr2') == None:
            self.set('boostersr2', "‚ö°Ô∏è <b>–ë—É—Å—Ç —Ä—É–¥—ã 2.0 </b><i>+1</i>")
        
        if self.get('boostersd2.5') == None:
            self.set('boostersd2.5', "‚ö°Ô∏è <b>–ë—É—Å—Ç –¥–µ–Ω–µ–≥ 2.5 </b><i>+1</i>")

        if self.get('boostersr2.5') == None:
            self.set('boostersr2.5', "‚ö°Ô∏è <b>–ë—É—Å—Ç —Ä—É–¥—ã 2.5 </b><i>+1</i>")

        if self.get('boostersd3') == None:
            self.set('boostersd3', "‚ö°Ô∏è <b>–ë—É—Å—Ç –¥–µ–Ω–µ–≥ 3.0 </b><i>+1</i>")

        if self.get('boostersr3') == None:
            self.set('boostersr3', "‚ö°Ô∏è <b>–ë—É—Å—Ç —Ä—É–¥—ã 3.0 </b><i>+1</i>")

        if self.get('creditss') == None:
            self.set('creditss', "<code>{nick}</code> <b>–ø–µ—Ä–µ—á–∏—Å–ª–∏–ª —Ç–µ–±–µ:</b>\nüí≥ <code>{cred}</code> <b>—ç–≤–æ-–∫–æ–∏–Ω–æ–≤</b>")


        self._backup_channel, _ = await utils.asset_channel(
            self._client,
            "mlogs",
            "–ì—Ä—É–ø–ø–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è mlogs",
            silent=True,
            archive=True,
            _folder="hikka",
        )

        
        await self.client(functions.channels.InviteToChannelRequest(self._backup_channel.id, [self.inline.bot.id]))                                
        await self.client(functions.channels.EditAdminRequest(
                channel=self._backup_channel,
                user_id=self.inline.bot.id,
                admin_rights=ChatAdminRights(ban_users=True, post_messages=True, edit_messages=True),
                rank="Logger",
            )
          )
        
        self.set("chid", int(f"-100{self._backup_channel.id}"))

    @loader.command()
    async def strs(self, m: Message):
        '''–°—Ç—Ä–æ–∫–∏'''
        await utils.answer(m, f"<b>–¢–µ–∫—É—â–∏–µ —Å—Ç—Ä–æ–∫–∏</b>:\n\n<i>–ö—Ç</i>:\n{self.get('kts')}\n<i>–†–∫—Ç</i>:\n{self.get('rkts')}\n<i>–ö</i>:\n{self.get('ks')}\n<i>–†–∫</i>:\n{self.get('rks')}\n<i>–ú–∏—Ñ</i>:\n{self.get('mifs')}\n<i>–ü—Å—ç</i>:\n{self.get('pss')}\n<i>–°—Å–ø</i>:\n{self.get('sss')}\n<i>–ö—Ä</i>:\n{self.get('krs')}\n<i>–ó–≤</i>:\n{self.get('zvs')}\n\n<i>–¢—Ä–µ–π–¥—ã</i>:\n{self.get('tradett')}\n<i>–ö—Ä–µ–¥–∏—Ç—ã</i>:\n{self.get('creditss')}")


    @loader.watcher()
    async def watcher(self, message):
        chid = int(self.get("chid"))
        if hasattr(message, 'from_id') and message.from_id in [7084173311, 7066508668, 5522271758, 7168860714] and message.chat_id in [7084173311, 7066508668, 5522271758, 7168860714] and "–ù–∞–π–¥–µ–Ω" in message.raw_text:
            if "‚úâ" in message.raw_text and "–ö–æ–Ω–≤–µ—Ä—Ç" in message.raw_text:
                if self.get('kt'):
                    colpt = r"\d+"
                    search = re.search(colpt, message.raw_text)
                    colvo = search[0]
                    await self.inline.bot.send_message(chid, self.get('kts').format(colvo=colvo))

            if "üßß" in message.raw_text and "–†–µ–¥–∫–∏–π –ö–æ–Ω–≤–µ—Ä—Ç" in message.raw_text:
                if self.get('rkt'):     
                    colpt = r"\d+"
                    search = re.search(colpt, message.raw_text)
                    colvo = search[0]
                    await self.inline.bot.send_message(chid, self.get('rkts').format(colvo=colvo))
            
            if "üì¶" in message.raw_text and "–ö–µ–π—Å" in message.raw_text:
                if self.get('k'):              
                    colpt = r"\d+"
                    search = re.search(colpt, message.raw_text)
                    colvo = search[0]
                    await self.inline.bot.send_message(chid, self.get('ks').format(colvo=colvo))
            
            if "üó≥" in message.raw_text and "–†–µ–¥–∫–∏–π –ö–µ–π—Å" in message.raw_text:
                if self.get('rk'):
                    colpt = r"\d+"
                    search = re.search(colpt, message.raw_text)
                    colvo = search[0]
                    await self.inline.bot.send_message(chid, self.get('rks').format(colvo=colvo))

            if "üïã" in message.raw_text and "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ö–µ–π—Å" in message.raw_text:
                if self.get('mif'):         
                    colpt = r"\d+"
                    search = re.search(colpt, message.raw_text)
                    colvo = search[0]
                    await self.inline.bot.send_message(chid, self.get('mifs').format(colvo=colvo))
            
            if "–ü–æ—Ä—Ç—Ñ–µ–ª—å" in message.raw_text:
                if self.get('ps'):
                    colpt = r"\d+"
                    search = re.search(colpt, message.raw_text)
                    colvo = search[0]
                    await self.inline.bot.send_message(chid, self.get('pss').format(colvo=colvo))

            if "–°—É–º–∫–∞" in message.raw_text:    
                if self.get('ss'):
                    colpt = r"\d+"
                    search = re.search(colpt, message.raw_text)
                    colvo = search[0]
                    await self.inline.bot.send_message(chid, self.get('sss').format(colvo=colvo))

            if "üíé" in message.raw_text and "–ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π –ö–µ–π—Å" in message.raw_text:
               if self.get('kr'):
                    colpt = r"\d+"
                    search = re.search(colpt, message.raw_text)
                    colvo = search[0]
                    await self.inline.bot.send_message(chid, self.get('krs').format(colvo=colvo))

            if "üé≤" in message.raw_text and "–î–∞–π—Å –ö–µ–π—Å" in message.raw_text:
                if self.get('dk'):
                    colpt = r"\d+"
                    search = re.search(colpt, message.raw_text)
                    colvo = search[0]
                    await self.inline.bot.send_message(chid, self.get('dks').format(colvo=colvo))  

        if if hasattr(message, 'from_id') and message.from_id in [7084173311, 7066508668, 5522271758, 7168860714] and message.chat_id in [7084173311, 7066508668, 5522271758, 7168860714] and "–ù–∞–π–¥–µ–Ω" in message.raw_text and "üí´" in message.raw_text or hasattr(message, 'from_id'):
            if self.get('zv'):
                colvo = 1
    
                await self.inline.bot.send_message(chid, self.get('zvs').format(colvo=colvo))
        
        if self.get('tradec'):                
            if hasattr(message, 'from_id') and message.from_id == 5522271758 and message.chat_id == 5522271758 and "–ø–µ—Ä–µ–¥–∞–ª(–∞) —Ç–µ–±–µ" in message.raw_text:
                nick = "<code>(.*?)</code>"
                kolvo = "—Ç–µ–±–µ  (.*?) —à—Ç."

                nickname = re.search(nick, message.text, re.DOTALL)
                kol = re.search(kolvo, message.raw_text, re.DOTALL)
                
                nick = nickname.group(1)
                cases = kol.group(1)

                await self.inline.bot.send_message(chid, self.get('tradett').format(nick=nick, cases=cases))

        if self.get('tradei'):
            if hasattr(message, 'from_id') and message.from_id == 5522271758 and message.chat_id == 5522271758 and "–ü–æ–ª—É—á–µ–Ω –ø—Ä–µ–¥–º–µ—Ç" in message.raw_text:
                nick = "–ò–≥—Ä–æ–∫  (.*?) –ø–µ—Ä–µ–¥–∞–ª"
                item = '—Ç–µ–±–µ :\n(.+)'

                nick = re.search(nick, message.raw_text, re.DOTALL)
                item = re.search(item, message.text, re.DOTALL)

                nick = nick.group(1)
                item = item.group(1)

                await self.inline.bot.send_message(chid, self.get('tradeis').format(nick=nick, item=item))

        
        if self.get('bosses'):
            if hasattr(message, 'from_id') and message.from_id == 5522271758 and message.chat_id == 5522271758 and "–ø–æ–±–µ–∂–¥–µ–Ω –∏–≥—Ä–æ–∫–æ–º" in message.raw_text:
                await self.inline.bot.send_message(chid, message.text)
        
        if self.get('boosters'):
            if hasattr(message, 'from_id') and message.from_id in [7084173311, 7066508668, 5522271758, 7168860714] and message.chat_id in [7084173311, 7066508668, 5522271758, 7168860714] and "—Ç—ã –Ω–∞—à–µ–ª(–ª–∞)" in message.raw_text and "–±—É—Å—Ç–µ—Ä: –†—É–¥–∞ √ó2.0!" in message.raw_text:
                    await self.inline.bot.send_message(chid, self.get('boostersr2'))
            if hasattr(message, 'from_id') and message.from_id in [7084173311, 7066508668, 5522271758, 7168860714] and message.chat_id in [7084173311, 7066508668, 5522271758, 7168860714] and "—Ç—ã –Ω–∞—à–µ–ª(–ª–∞)" in message.raw_text and "–±—É—Å—Ç–µ—Ä: –î–µ–Ω—å–≥–∏ √ó2.0!" in message.raw_text:
                await self.inline.bot.send_message(chid, self.get('boostersd2'))
            if hasattr(message, 'from_id') and message.from_id in [7084173311, 7066508668, 5522271758, 7168860714] and message.chat_id in [7084173311, 7066508668, 5522271758, 7168860714] and "—Ç—ã –Ω–∞—à–µ–ª(–ª–∞)" in message.raw_text and "–±—É—Å—Ç–µ—Ä: –î–µ–Ω—å–≥–∏ √ó1.5!" in message.raw_text:
                await self.inline.bot.send_message(chid, self.get('boostersd1.5'))
            if hasattr(message, 'from_id') and message.from_id in [7084173311, 7066508668, 5522271758, 7168860714] and message.chat_id in [7084173311, 7066508668, 5522271758, 7168860714] and "—Ç—ã –Ω–∞—à–µ–ª(–ª–∞)" in message.raw_text and "–±—É—Å—Ç–µ—Ä: –†—É–¥–∞ √ó1.5!" in message.raw_text:
                await self.inline.bot.send_message(chid, self.get('boostersr1.5'))
            if hasattr(message, 'from_id') and message.from_id in [7084173311, 7066508668, 5522271758, 7168860714] and message.chat_id in [7084173311, 7066508668, 5522271758, 7168860714] and "—Ç—ã –Ω–∞—à–µ–ª(–ª–∞)" in message.raw_text and "–±—É—Å—Ç–µ—Ä: –î–µ–Ω—å–≥–∏ √ó2.5!" in message.raw_text:
                await self.inline.bot.send_message(chid, self.get('boostersd2.5'))
            if hasattr(message, 'from_id') and message.from_id in [7084173311, 7066508668, 5522271758, 7168860714] and message.chat_id in [7084173311, 7066508668, 5522271758, 7168860714] and "—Ç—ã –Ω–∞—à–µ–ª(–ª–∞)" in message.raw_text and "–±—É—Å—Ç–µ—Ä: –†—É–¥–∞ √ó2.5!" in message.raw_text:
                await self.inline.bot.send_message(chid, self.get('boostersr2.5'))
            if hasattr(message, 'from_id') and message.from_id in [7084173311, 7066508668, 5522271758, 7168860714] and message.chat_id in [7084173311, 7066508668, 5522271758, 7168860714] and "—Ç—ã –Ω–∞—à–µ–ª(–ª–∞)" in message.raw_text and "–±—É—Å—Ç–µ—Ä: –î–µ–Ω—å–≥–∏ √ó3.0!" in message.raw_text:
                await self.inline.bot.send_message(chid, self.get('boostersr3'))
            if hasattr(message, 'from_id') and message.from_id in [7084173311, 7066508668, 5522271758, 7168860714] and message.chat_id in [7084173311, 7066508668, 5522271758, 7168860714] and "—Ç—ã –Ω–∞—à–µ–ª(–ª–∞)" in message.raw_text and "–±—É—Å—Ç–µ—Ä: –†—É–¥–∞ √ó3.0!" in message.raw_text:
                await self.inline.bot.send_message(chid, self.get('boostersd3'))
                
        if self.get('credits'):
            if hasattr(message, 'from_id') and message.from_id == 5522271758 and message.chat_id == 5522271758 and "üí≥" in message.raw_text and '–ø–µ—Ä–µ—á–∏—Å–ª–∏–ª(–∞) —Ç–µ–±–µ ' in message.raw_text:
                nickc = "<code>(.*?)</code>"
                kolvoc = "—Ç–µ–±–µ (.*?) —ç–≤–æ"

                kolvocredits = re.search(kolvoc, message.text, re.DOTALL)
                nickcredits = re.search(nickc, message.text, re.DOTALL)

                cred = kolvocredits.group(1)
                nick = nickcredits.group(1)

                await self.inline.bot.send_message(chid, self.get('creditss').format(cred=cred, nick=nick))
            
            
    @loader.command()
    async def setstr(self, message: Message):
        '''- –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫—É\n[–¢–∏–ø —Å—Ç—Ä–æ–∫–∏] [–ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞\–ù–∏—á–µ–≥–æ]\n–¢–∏–ø —Å—Ç—Ä–æ–∫–∏ –∏ –∫–∞–∫ –µ—ë –∏–∑–º–µ–Ω—è—Ç—å –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ .sethelp'''
        args = utils.get_args_raw(message.text)
        cmd = f'{utils.escape_html(self.get_prefix())}{inspect.currentframe().f_code.co_name}'
        if not args:
            await utils.answer(message, f"<emoji document_id=5240241223632954241>üö´</emoji><b> –û—à–∏–±–∫–∞ | <code>{cmd}</code>\n–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Å—Ç—Ä–æ–∫–∏")
            return
        if args:
            cmd = f'{utils.escape_html(self.get_prefix())}{inspect.currentframe().f_code.co_name} {utils.get_args_raw(message)}'
            type = args.split(' ', maxsplit=1)[0].lower()
            stri = None
            if len(args.split(' ', maxsplit=1)) > 1:
                stri = args.split(' ', maxsplit=1)[1]

            if type == "–∫—Ç":
                if stri == None:
                    self.set('kts', "‚úâÔ∏è <b>–ö–æ–Ω–≤–µ—Ä—Ç <code>+{colvo}</code></b>")
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</b>:\n{self.get('kts')}")
                    return
                if "{colvo}" not in stri:
                    await utils.answer(message, f"<emoji document_id=5240241223632954241>üö´</emoji><b> –û—à–∏–±–∫–∞ | <code>{cmd}</code>\n<b>–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ —Å—Ç—Ä–æ–∫ '–∫–µ–π—Å—ã'</b>")
                    return
                else:
                    self.set('kts', stri)
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –ò–∑–º–µ–Ω–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ ‚úâÔ∏è <i>–ö–æ–Ω–≤–µ—Ä—Ç</i> –Ω–∞</b>:\n{self.get('kts')}")
            
            elif type == "—Ä–∫—Ç":
                if stri == None:
                    self.set('rkts', "üßß <b>–†–µ–¥–∫–∏–π –ö–æ–Ω–≤–µ—Ä—Ç <code>+{colvo}</code></b>")
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</b>:\n{self.get('rkts')}")
                    return
                if "{colvo}" not in stri:
                    await utils.answer(message, f"<emoji document_id=5240241223632954241>üö´</emoji><b> –û—à–∏–±–∫–∞ | <code>{cmd}</code>\n<b>–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ —Å—Ç—Ä–æ–∫ '–∫–µ–π—Å—ã'</b>")
                    return
                else:
                    self.set('rkts', stri)
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –ò–∑–º–µ–Ω–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ üßß <i>–†–µ–¥–∫–∏–π –ö–æ–Ω–≤–µ—Ä—Ç</i> –Ω–∞</b>:\n{self.get('rkts')}")

            elif type == "–∫":
                if stri == None:
                    self.set('ks', "üì¶ <b>–ö–µ–π—Å <code>+{colvo}</code></b>")
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</b>:\n{self.get('ks')}")
                    return
                if "{colvo}" not in stri:
                    await utils.answer(message, f"<emoji document_id=5240241223632954241>üö´</emoji><b> –û—à–∏–±–∫–∞ | <code>{cmd}</code>\n<b>–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ —Å—Ç—Ä–æ–∫ '–∫–µ–π—Å—ã'</b>")
                    return
                else:
                    self.set('ks', stri)
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –ò–∑–º–µ–Ω–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ üì¶ <i>–ö–µ–π—Å</i> –Ω–∞</b>:\n{self.get('ks')}")

            elif type == "—Ä–∫":
                if stri == None:
                    self.set('rks', "üó≥ <b>–†–µ–¥–∫–∏–π –ö–µ–π—Å <code>+{colvo}</code></b>")
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</b>:\n{self.get('rks')}")
                    return
                if "{colvo}" not in stri:
                    await utils.answer(message, f"<emoji document_id=5240241223632954241>üö´</emoji><b> –û—à–∏–±–∫–∞ | <code>{cmd}</code>\n<b>–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ —Å—Ç—Ä–æ–∫ '–∫–µ–π—Å—ã'</b>")
                    return
                else:
                    self.set('rks', stri)
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –ò–∑–º–µ–Ω–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ üó≥ <i>–†–µ–¥–∫–ø–π –ö–µ–π—Å</i> –Ω–∞</b>:\n{self.get('rks')}")
            
            elif type == "–º–∏—Ñ":
                if stri == None:
                    self.set('mifs', "<i>–ì—Ä–∞—Ü!</i>\nüïã <b>–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ö–µ–π—Å <code>+{colvo}</code>!</b>")
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</b>:\n{self.get('mifs')}")
                    return
                if "{colvo}" not in stri:
                    await utils.answer(message, f"<emoji document_id=5240241223632954241>üö´</emoji><b> –û—à–∏–±–∫–∞ | <code>{cmd}</code>\n<b>–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ —Å—Ç—Ä–æ–∫ '–∫–µ–π—Å—ã'</b>")
                    return
                else:
                    self.set('mifs', stri)
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –ò–∑–º–µ–Ω–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ üïã <i>–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ö–µ–π—Å</i> –Ω–∞</b>:\n{self.get('mifs')}")

            elif type == "–ø—Å—ç":
                if stri == None:
                    self.set('pss', "<i>Luck is on your side!</i>\nüíº <b>–ü–æ—Ä—Ç—Ñ–µ–ª—å —Å –≠—Å–∫–∏–∑–∞–º–∏ <code>+{colvo}</code></b>")
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</b>:\n{self.get('pss')}")
                    return
                if "{colvo}" not in stri:
                    await utils.answer(message, f"<emoji document_id=5240241223632954241>üö´</emoji><b> –û—à–∏–±–∫–∞ | <code>{cmd}</code>\n<b>–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ —Å—Ç—Ä–æ–∫ '–∫–µ–π—Å—ã'</b>")
                    return
                else:
                    self.set('pss', stri)
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –ò–∑–º–µ–Ω–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ üíº <i>–ü–æ—Ä—Ç—Ñ–µ–ª—å —Å –≠—Å–∫–∏–∑–∞–º–∏</i> –Ω–∞</b>:\n{self.get('pss')}")

            elif type == "—Å—Å–ø":
                if stri == None:
                    self.set('sss', "<i>A pleasant surprise!</i>\nüëú <b>–°—É–º–∫–∞ —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ <code>+{colvo}</code></b>")
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</b>:\n{self.get('sss')}")
                    return
                if "{colvo}" not in stri:
                    await utils.answer(message, f"<emoji document_id=5240241223632954241>üö´</emoji><b> –û—à–∏–±–∫–∞ | <code>{cmd}</code>\n<b>–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ —Å—Ç—Ä–æ–∫ '–∫–µ–π—Å—ã'</b>")
                    return
                else:
                    self.set('sss', stri)
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –ò–∑–º–µ–Ω–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ üëú <i>–°—É–º–∫–∞ —Å –ü—Ä–µ–¥–º–µ—Ç–∞–º–∏</i> –Ω–∞</b>:\n{self.get('sss')}")

            elif type == "–∫—Ä":
                if stri == None:
                    self.set('krs', "<i>Congratulations!</i>\nüíé <b>–ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π –∫–µ–π—Å <code>+{colvo}</code>!</b>")
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</b>:\n{self.get('krs')}")
                    return
                if "{colvo}" not in stri:
                    await utils.answer(message, f"<emoji document_id=5240241223632954241>üö´</emoji><b> –û—à–∏–±–∫–∞ | <code>{cmd}</code>\n<b>–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ —Å—Ç—Ä–æ–∫ '–∫–µ–π—Å—ã'</b>")
                    return
                else:
                    self.set('krs', stri)
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –ò–∑–º–µ–Ω–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ üíé <i>–ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π –ö–µ–π—Å</i> –Ω–∞</b>:\n{self.get('krs')}")

            elif type == "–¥–∫":
                if stri == None:
                    self.set('dks', "<i>Good luck!</i>\nüé≤ <b>–ö–µ–π—Å –∫—É–±–∏–∫ <code>+{colvo}</code></b>")
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</b>:\n{self.get('dks')}")
                    return
                if "{colvo}" not in stri:
                    await utils.answer(message, f"<emoji document_id=5240241223632954241>üö´</emoji><b> –û—à–∏–±–∫–∞ | <code>{cmd}</code>\n<b>–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ —Å—Ç—Ä–æ–∫ '–∫–µ–π—Å—ã'</b>")
                    return
                else:
                    self.set('dks', stri)
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –ò–∑–º–µ–Ω–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ üé≤ <i>–î–∞–π—Å –ö–µ–π—Å</i> –Ω–∞</b>:\n{self.get('dks')}")
            elif type == '–∑–≤':
                if stri == None:
                    self.set('zvs', "<i>WOW, you are lucky!</i>\nüåå <b>–ó–≤–µ–∑–¥–Ω—ã–π –ö–µ–π—Å <code>+{colvo}</code></b>")
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</b>:\n{self.get('zvs')}")
                    return
                if "{colvo}" not in stri:
                    await utils.answer(message, f"<emoji document_id=5240241223632954241>üö´</emoji><b> –û—à–∏–±–∫–∞ | <code>{cmd}</code>\n<b>–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ —Å—Ç—Ä–æ–∫ '–∫–µ–π—Å—ã'</b>")
                    return
                else: 
                    self.set('zvs', stri)
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –ò–∑–º–µ–Ω–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ üåå <i>–ó–≤—ë–∑–¥–Ω—ã–π –ö–µ–π—Å</i> –Ω–∞</b>:\n{self.get('zvs')}")

            elif type == "–æ–±–º–µ–Ω":
                if stri == None:
                    self.set('tradett', "<b><code>{nick}</code> –¥–∞–ª —Ç–µ–±–µ</b>:\n<i>{cases}</i>")
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</b>:\n{self.get('tradett')}")
                    return
                if not "{cases}" in stri or not "{nick}" in stri:
                    await utils.answer(message, f"<emoji document_id=5240241223632954241>üö´</emoji><b> –û—à–∏–±–∫–∞ | <code>{cmd}</code>\n<b>–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ —Å—Ç—Ä–æ–∫–∏ '–æ–±–º–µ–Ω'</b>")
                    return
                if "{cases}" in stri and "{nick}" in stri:
                    self.set('tradett', stri)
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –ò–∑–º–µ–Ω–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ <i>–û–±–º–µ–Ω</i> –Ω–∞</b>:\n{self.get('tradett')}")

            elif type == "–±–¥15":
                if stri == None:
                    self.set('boostersd1.5', "‚ö°Ô∏è <b>–ë—É—Å—Ç –¥–µ–Ω–µ–≥ 1.5 </b><i>+1</i>")
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</b>:\n{self.get('boostersd1.5')}")
                    return
                else: 
                    self.set('boostersd1.5', stri)
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –ò–∑–º–µ–Ω–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ ‚ö°Ô∏è <i>–ë—É—Å—Ç–µ—Ä –¥–µ–Ω–µ–≥ 1.5</i> –Ω–∞</b>:\n{self.get('boostersd1.5')}")

            elif type == "–±—Ä15":
                if stri == None:
                    self.set('boostersr1.5', "‚ö°Ô∏è <b>–ë—É—Å—Ç —Ä—É–¥—ã 1.5 </b><i>+1</i>")
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</b>:\n{self.get('boostersr1.5')}")
                    return
                else: 
                    self.set('boostersr1.5', stri)
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –ò–∑–º–µ–Ω–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ ‚ö°Ô∏è <i>–ë—É—Å—Ç–µ—Ä —Ä—É–¥—ã 1.5</i> –Ω–∞</b>:\n{self.get('boostersr1.5')}")

            elif type == "–±–¥2":
                if stri == None:
                    self.set('boostersd2', "‚ö°Ô∏è <b>–ë—É—Å—Ç –¥–µ–Ω–µ–≥ 2.0 </b><i>+1</i>")
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</b>:\n{self.get('boostersd2')}")
                    return
                else: 
                    self.set('boostersd2', stri)
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –ò–∑–º–µ–Ω–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ ‚ö°Ô∏è <i>–ë—É—Å—Ç–µ—Ä –¥–µ–Ω–µ–≥ 2</i> –Ω–∞</b>:\n{self.get('boostersd2')}")

            elif type == "–±—Ä2":
                if stri == None:
                    self.set('boostersr2', "‚ö°Ô∏è <b>–ë—É—Å—Ç —Ä—É–¥—ã 2.0 </b><i>+1</i>")
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</b>:\n{self.get('boostersr2')}")
                    return
                else: 
                    self.set('boostersr2', stri)
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –ò–∑–º–µ–Ω–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ ‚ö°Ô∏è <i>–ë—É—Å—Ç–µ—Ä —Ä—É–¥—ã 2</i> –Ω–∞</b>:\n{self.get('boostersr2')}")

            elif type == "–±–¥25":
                if stri == None:
                    self.set('boostersd2.5', "‚ö°Ô∏è <b>–ë—É—Å—Ç –¥–µ–Ω–µ–≥ 2.5 </b><i>+1</i>")
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</b>:\n{self.get('boostersd2.5')}")
                    return
                else: 
                    self.set('boostersd2.5', stri)
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –ò–∑–º–µ–Ω–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ ‚ö°Ô∏è <i>–ë—É—Å—Ç–µ—Ä –¥–µ–Ω–µ–≥ 2.5</i> –Ω–∞</b>:\n{self.get('boostersd2.5')}")

            elif type == "–±—Ä25":
                if stri == None:
                    self.set('boostersr2.5', "‚ö°Ô∏è <b>–ë—É—Å—Ç —Ä—É–¥—ã 2.5 </b><i>+1</i>")
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</b>:\n{self.get('boostersr2.5')}")
                    return
                else: 
                    self.set('boostersr2.5', stri)
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –ò–∑–º–µ–Ω–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ ‚ö°Ô∏è <i>–ë—É—Å—Ç–µ—Ä —Ä—É–¥—ã 2.5</i> –Ω–∞</b>:\n{self.get('boostersr2.5')}")

            elif type == "–±–¥3":
                if stri == None:
                    self.set('boostersd3', "‚ö°Ô∏è <b>–ë—É—Å—Ç –¥–µ–Ω–µ–≥ 3.0 </b><i>+1</i>")
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</b>:\n{self.get('boostersd3')}")
                    return
                else: 
                    self.set('boostersd3', stri)
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –ò–∑–º–µ–Ω–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ ‚ö°Ô∏è <i>–ë—É—Å—Ç–µ—Ä –¥–µ–Ω–µ–≥ 3</i> –Ω–∞</b>:\n{self.get('boostersd3')}")

            elif type == "–±—Ä3":
                if stri == None:
                    self.set('boostersr3', "‚ö°Ô∏è <b>–ë—É—Å—Ç —Ä—É–¥—ã 3.0 </b><i>+1</i>")
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</b>:\n{self.get('boostersr3')}")
                    return
                else: 
                    self.set('boostersr3', stri)
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –ò–∑–º–µ–Ω–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ ‚ö°Ô∏è <i>–ë—É—Å—Ç–µ—Ä —Ä—É–¥—ã 3</i> –Ω–∞</b>:\n{self.get('boostersr3')}")   

            elif type == "–∫—Ä–µ–¥–∏—Ç—ã":
                if stri == None:
                    self.set('creditss', "<code>{nick}</code> <b>–ø–µ—Ä–µ—á–∏—Å–ª–∏–ª —Ç–µ–±–µ:</b>\nüí≥ <code>{cred}</code> <b>—ç–≤–æ-–∫–æ–∏–Ω–æ–≤</b>")
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</b>:\n{self.get('creditss')}")
                    return
                if not "{nick}" in stri or not "{cred}" in stri:
                    await utils.answer(message, f"<emoji document_id=5240241223632954241>üö´</emoji><b> –û—à–∏–±–∫–∞ | <code>{cmd}</code>\n<b>–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ —Å—Ç—Ä–æ–∫–∏ '–∫—Ä–µ–¥–∏—Ç—ã'</b>")
                if "{nick}" in stri and "{cred}" in stri: 
                    self.set('creditss', stri)
                    await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji><b> –ò–∑–º–µ–Ω–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ üí≥ <i>–ö—Ä–µ–¥–∏—Ç—ã</i> –Ω–∞</b>:\n{self.get('creditss')}")   
            
            else:
                await utils.answer(message, f"<emoji document_id=5240241223632954241>üö´</emoji><b> –û—à–∏–±–∫–∞ | <code>{cmd}</code>\n<b>–í–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç—Ä–æ–∫–∏</b>")

    @loader.command()
    async def sethelp(self, message: Message):
        '''–ü–æ–º–æ—â—å –¥–ª—è –∫–æ–º–∞–Ω–¥—ã .setstr'''
        await utils.answer(message, "<u>–¢–∏–ø—ã —Å—Ç—Ä–æ–∫:</u>\n‚Ä¢ <code>–ö—Ç</code> - <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–∞–¥–µ–Ω–∏–∏ ‚úâÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∞</b>\n‚Ä¢ <code>–†–∫—Ç</code> - <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–∞–¥–µ–Ω–∏–∏ üßß –†–µ–¥–∫–æ–≥–æ –ö–æ–Ω–≤–µ—Ä—Ç–∞</b>\n‚Ä¢ <code>–ö</code> - <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–∞–¥–µ–Ω–∏–∏ üì¶ –ö–µ–π—Å–∞</b>\n‚Ä¢ <code>–†–∫</code> - <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–∞–¥–µ–Ω–∏–∏ üó≥ –†–µ–¥–∫–æ–≥–æ –ö–µ–π—Å–∞</b>\n‚Ä¢ <code>–ú–∏—Ñ</code> - <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–∞–¥–µ–Ω–∏–∏ üïã –ú–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –ö–µ–π—Å–∞</b>\n‚Ä¢ <code>–ö—Ä</code> - <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–∞–¥–µ–Ω–∏–∏ üíé –ö—Ä–∏—Å—Ç–∞–ª—å–Ω–æ–≥–æ –ö–µ–π—Å–∞</b>\n‚Ä¢ <code>–î–∫</code> - <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–∞–¥–µ–Ω–∏–∏ üé≤ –î–∞–π—Å –ö–µ–π—Å–∞</b>\n‚Ä¢ <code>–ó–≤</code> - <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–∞–¥–µ–Ω–∏–∏ üåå –ó–≤—ë–∑–¥–Ω–æ–≥–æ –ö–µ–π—Å–∞</b>\n‚Ä¢ <code>–ë—É—Å—Ç—ã</code> - <b>‚ö°Ô∏è –°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–ø–∞–¥–µ–Ω–∏–∏ –±—É—Å—Ç–æ–≤<b>\n    - <code>–±–¥15</code> - <b>–ë—É—Å—Ç –¥–µ–Ω–µ–≥ 1.5</b>\n    - <code>–±—Ä15</code> - <b>–ë—É—Å—Ç —Ä—É–¥—ã 1.5</b>\n    - <code>–±–¥2</code> - <b>–ë—É—Å—Ç –¥–µ–Ω–µ–≥ 2.0</b>\n    - <code>–±—Ä2</code> - <b>–ë—É—Å—Ç —Ä—É–¥—ã 2.0</b>\n    - <code>–±–¥25</code> - <b>–ë—É—Å—Ç –¥–µ–Ω–µ–≥ 2.5</b>\n    - <code>–±—Ä25</code> - <b>–ë—É—Å—Ç —Ä—É–¥—ã 2.5</b>\n    - <code>–±–¥3</code> - <b>–ë—É—Å—Ç –¥–µ–Ω–µ–≥ 3.0</b>\n    - <code>–±—Ä3</code> - <b>–ë—É—Å—Ç —Ä—É–¥—ã 3.0</b>\n<i>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω –Ω–µ—Ç—É</i>\n\n‚Ä¢ <code>–ö—Ä–µ–¥–∏—Ç—ã</code> - <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–∏ —Ç–µ–±–µ –∫—Ä–µ–¥–∏—Ç–æ–≤</b>\n    - <i>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:</i> <code>{nick}</code>, <code>{cred}</code>\n‚Ä¢ <code>–û–±–º–µ–Ω</code> - <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Ç–µ–±–µ –∫–µ–π—Å–æ–≤</b>\n    - <i>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:</i> <code>{nick}</code>, <code>{cases}</code>\n\n<u>–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ</u>:\n‚Ä¢ <code>{nick}</code> - <b>–ù–∏–∫ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–±–µ –∫–µ–π—Å—ã/–∫—Ä–µ–¥–∏—Ç—ã</b>\n‚Ä¢ <code>{cases}</code> - <b>–ö–µ–π—Å—ã –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –ø–µ—Ä–µ–≤–æ–¥—è—Ç</b>\n‚Ä¢ <code>{cred}</code> - <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –ø–µ—Ä–µ—á–∏—Å–ª—è—é—Ç</b>")
    @loader.command()
    async def mlogs(self, message):
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–º"
        if self.get('kt'):
            ktt = ' ‚ñ´Ô∏è<i> ‚úâÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else:
            ktt = ''

        if self.get('rkt'):
            rktt = ' ‚ñ´Ô∏è<i> üßß –†–µ–¥–∫–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else: 
            rktt = ''

        if self.get('k'):
            kk = ' ‚ñ´Ô∏è<i> üì¶ –ö–µ–π—Å—ã</i>\n'
        else:
            kk = ''

        if self.get('rk'):
            rkk = ' ‚ñ´Ô∏è<i> üó≥ –†–µ–¥–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            rkk = ''

        if self.get('mif'):
            miff = ' ‚ñ´Ô∏è<i> üïã –ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            miff = ''

        if self.get('ps'):
            psss = ' ‚ñ´Ô∏è<i> üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å —Å –≠—Å–∫–∏–∑–∞–º–∏</i>\n'
        else:
            psss = ''

        if self.get('ss'):
            ssss = ' ‚ñ´Ô∏è<i> üëú –°—É–º–∫–∞ —Å –ü—Ä–µ–¥–º–µ—Ç–∞–º–∏</i>\n'
        else:
            ssss = ''

        if self.get('kr'):
            krr = ' ‚ñ´Ô∏è<i> üíé –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            krr = ""

        if self.get('dk'):
            dkk = " ‚ñ´Ô∏è<i> üé≤ –î–∞–π—Å –ö–µ–π—Å</i>\n"
        else:
            dkk = ''
        
        if self.get('zv'):
            zvv = ' ‚ñ´Ô∏è<i> üåå –ó–≤—ë–∑–¥–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            zvv = ""

        if self.get('credits'):
            crd = ' ‚ñ´Ô∏è<i> üí≥ –ö—Ä–µ–¥–∏—Ç—ã</i>\n'
        else:
            crd = ''

        if self.get('boosters'):
            bosst = ' ‚ñ´Ô∏è<i> ‚ö°Ô∏è –ë—É—Å—Ç—ã </i>\n'
        else:
            bosst = ""

        if self.get('tradec'):
            tradee = ' ‚ñ´Ô∏è<i> üì¶ –ü–µ—Ä–µ–¥–∞—á–∞ –∫–µ–π—Å–æ–≤</i>\n'
        else:
            tradee = ''

        if self.get('tradei'):
            tradeii = ' ‚ñ´Ô∏è<i> ü™Ñ –ü–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤</i>\n'
        else:
            tradeii = ''

        if self.get('bosses'):
            bosss = ' ‚ñ´Ô∏è<i> üó° –ë–æ—Å—Å—ã </i>\n'
        else:
            bosss = ''
        await self.inline.form(
                text=f"<b>–õ–æ–≥–≥–∏—Ä—É–µ–º—ã–µ –∫–µ–π—Å—ã:</b>\n{ktt}{rktt}{kk}{rkk}{miff}{psss}{ssss}{krr}{dkk}{zvv}\n<b>–¢—Ä–µ–π–¥—ã:</b>\n{tradee}{tradeii}\n<b>–†–µ—Å—É—Ä—Å—ã:</b>\n{crd}{bosst}{bosss}",
                message=message,
                reply_markup=[
                    [
                            {
                                "text": "üì¶ –ö–µ–π—Å—ã",
                                "callback": self.icases,
                            },
                            {
                                "text" : "‚ö°Ô∏è –ë—É—Å—Ç—ã",
                                "callback" : self.iboost,
                            },
                            {
                                "text" : "‚ôªÔ∏è –¢—Ä–µ–π–¥—ã",
                                "callback" : self.itrade,
                            },
                    ],
                    [
                            {
                                "text": "üó° –ë–æ—Å—Å—ã",
                                "callback": self.iboss,
                            },
                            {
                                'text' : "üí≥ –ö—Ä–µ–¥–∏—Ç—ã",
                                'callback' : self.icrd,
                            },
                    ],
                    [
                            {
                                "text": "üîª –ó–∞–∫—Ä—ã—Ç—å",
                                "action" : "close",
                            }
                    ],
                ],
          )  


    async def icrd(self,call:InlineCall):
        self.set('credits', not self.get('credits'))
        if self.get('kt'):
            ktt = ' ‚ñ´Ô∏è<i> ‚úâÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else:
            ktt = ''

        if self.get('rkt'):
            rktt = ' ‚ñ´Ô∏è<i> üßß –†–µ–¥–∫–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else: 
            rktt = ''

        if self.get('k'):
            kk = ' ‚ñ´Ô∏è<i> üì¶ –ö–µ–π—Å—ã</i>\n'
        else:
            kk = ''

        if self.get('rk'):
            rkk = ' ‚ñ´Ô∏è<i> üó≥ –†–µ–¥–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            rkk = ''

        if self.get('mif'):
            miff = ' ‚ñ´Ô∏è<i> üïã –ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            miff = ''

        if self.get('ps'):
            psss = ' ‚ñ´Ô∏è<i> üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å —Å –≠—Å–∫–∏–∑–∞–º–∏</i>\n'
        else:
            psss = ''

        if self.get('ss'):
            ssss = ' ‚ñ´Ô∏è<i> üëú –°—É–º–∫–∞ —Å –ü—Ä–µ–¥–º–µ—Ç–∞–º–∏</i>\n'
        else:
            ssss = ''

        if self.get('kr'):
            krr = ' ‚ñ´Ô∏è<i> üíé –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            krr = ""

        if self.get('dk'):
            dkk = " ‚ñ´Ô∏è<i> üé≤ –î–∞–π—Å –ö–µ–π—Å</i>\n"
        else:
            dkk = ''
        
        if self.get('zv'):
            zvv = ' ‚ñ´Ô∏è<i> üåå –ó–≤—ë–∑–¥–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            zvv = ""

        if self.get('credits'):
            crd = ' ‚ñ´Ô∏è<i> üí≥ –ö—Ä–µ–¥–∏—Ç—ã</i>\n'
        else:
            crd = ''

        if self.get('boosters'):
            bosst = ' ‚ñ´Ô∏è<i> ‚ö°Ô∏è –ë—É—Å—Ç—ã </i>\n'
        else:
            bosst = ""

        if self.get('tradec'):
            tradee = ' ‚ñ´Ô∏è<i> üì¶ –ü–µ—Ä–µ–¥–∞—á–∞ –∫–µ–π—Å–æ–≤</i>\n'
        else:
            tradee = ''

        if self.get('tradei'):
            tradeii = ' ‚ñ´Ô∏è<i> ü™Ñ –ü–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤</i>\n'
        else:
            tradeii = ''

        if self.get('bosses'):
            bosss = ' ‚ñ´Ô∏è<i> üó° –ë–æ—Å—Å—ã </i>\n'
        else:
            bosss = ''
        await call.edit(
                text=f"<b>–õ–æ–≥–≥–∏—Ä—É–µ–º—ã–µ –∫–µ–π—Å—ã:</b>\n{ktt}{rktt}{kk}{rkk}{miff}{psss}{ssss}{krr}{dkk}{zvv}\n<b>–¢—Ä–µ–π–¥—ã:</b>\n{tradee}{tradeii}\n<b>–†–µ—Å—É—Ä—Å—ã:</b>\n{crd}{bosst}{bosss}",
                reply_markup=[
                    [
                            {
                                "text": "üì¶ –ö–µ–π—Å—ã",
                                "callback": self.icases,
                            },
                            {
                                "text" : "‚ö°Ô∏è –ë—É—Å—Ç—ã",
                                "callback" : self.iboost,
                            },
                            {
                                "text" : "‚ôªÔ∏è –¢—Ä–µ–π–¥—ã",
                                "callback" : self.itrade,
                            },
                    ],
                    [
                            {
                                "text": "üó° –ë–æ—Å—Å—ã",
                                "callback": self.iboss,
                            },
                            {
                                'text' : "üí≥ –ö—Ä–µ–¥–∏—Ç—ã",
                                'callback' : self.icrd,
                            },
                    ],
                    [
                            {
                                "text": "üîª –ó–∞–∫—Ä—ã—Ç—å",
                                "action" : "close",
                            }
                    ],
                ],
          )  
    async def icases(self, call: InlineCall):
        if self.get('kt'):
            ktt = ' ‚ñ´Ô∏è<i> ‚úâÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else:
            ktt = ''

        if self.get('rkt'):
            rktt = ' ‚ñ´Ô∏è<i> üßß –†–µ–¥–∫–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else: 
            rktt = ''

        if self.get('k'):
            kk = ' ‚ñ´Ô∏è<i> üì¶ –ö–µ–π—Å—ã</i>\n'
        else:
            kk = ''

        if self.get('rk'):
            rkk = ' ‚ñ´Ô∏è<i> üó≥ –†–µ–¥–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            rkk = ''

        if self.get('mif'):
            miff = ' ‚ñ´Ô∏è<i> üïã –ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            miff = ''

        if self.get('ps'):
            psss = ' ‚ñ´Ô∏è<i> üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å —Å –≠—Å–∫–∏–∑–∞–º–∏</i>\n'
        else:
            psss = ''

        if self.get('ss'):
            ssss = ' ‚ñ´Ô∏è<i> üëú –°—É–º–∫–∞ —Å –ü—Ä–µ–¥–º–µ—Ç–∞–º–∏</i>\n'
        else:
            ssss = ''

        if self.get('kr'):
            krr = ' ‚ñ´Ô∏è<i> üíé –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            krr = ""

        if self.get('dk'):
            dkk = " ‚ñ´Ô∏è<i> üé≤ –î–∞–π—Å –ö–µ–π—Å</i>\n"
        else:
            dkk = ''
        
        if self.get('zv'):
            zvv = ' ‚ñ´Ô∏è<i> üåå –ó–≤—ë–∑–¥–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            zvv = ""

        if self.get('credits'):
            crd = ' ‚ñ´Ô∏è<i> üí≥ –ö—Ä–µ–¥–∏—Ç—ã</i>\n'
        else:
            crd = ''

        if self.get('boosters'):
            bosst = ' ‚ñ´Ô∏è<i> ‚ö°Ô∏è –ë—É—Å—Ç—ã </i>\n'
        else:
            bosst = ""

        if self.get('tradec'):
            tradee = ' ‚ñ´Ô∏è<i> üì¶ –ü–µ—Ä–µ–¥–∞—á–∞ –∫–µ–π—Å–æ–≤</i>\n'
        else:
            tradee = ''

        if self.get('tradei'):
            tradeii = ' ‚ñ´Ô∏è<i> ü™Ñ –ü–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤</i>\n'
        else:
            tradeii = ''

        if self.get('bosses'):
            bosss = ' ‚ñ´Ô∏è<i> üó° –ë–æ—Å—Å—ã </i>\n'
        else:
            bosss = ''
        await call.edit(
            text=f"<b>–õ–æ–≥–≥–∏—Ä—É–µ–º—ã–µ –∫–µ–π—Å—ã:</b>\n{ktt}{rktt}{kk}{rkk}{miff}{psss}{ssss}{krr}{dkk}{zvv}",
            reply_markup=[
            [
                {
                    "text": "‚úâÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç",
                    "callback": self.ikt,
                },
                {
                    "text": "üßß –†–µ–¥–∫–∏–π –ö–æ–Ω–≤–µ—Ä—Ç",
                    "callback": self.irkt,
                },
            ],
            [
                {
                    "text": "üì¶ –ö–µ–π—Å",
                    "callback": self.ik,
                },
                {
                    "text": "üó≥ –†–µ–¥–∫–∏–π –ö–µ–π—Å",
                    "callback": self.irk,
                },
            ],
            [
                {
                    "text": "üïã –ú–∏—Ñ–∏—á–µ—Å–∫–∏–π",
                    "callback": self.imif,
                },
                {
                    "text": "üíé –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π",
                    "callback": self.ikr,
                },
            ],
            [
                {
                    "text": "üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å",
                    "callback": self.ips, 
                },
                {
                    "text": "üëú –°—É–º–∫–∞",
                    "callback": self.iss
                }
            ],
            [
                {
                    "text" : "üé≤ –î–∞–π—Å",
                    'callback' : self.idk,
                },
                {
                    "text": "üåå –ó–≤—ë–∑–¥–Ω—ã–π –ö–µ–π—Å",
                    "callback": self.izv,
                },
            ],
            [
                {
                    "text": "üîô –ù–∞–∑–∞–¥",
                    "callback": self.iback,
                }
            ],
        ]           
    )
    async def ikt(self, call: InlineCall):
        self.set('kt', not self.get('kt'))
        if self.get('kt'):
            ktt = ' ‚ñ´Ô∏è<i> ‚úâÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else:
            ktt = ''

        if self.get('rkt'):
            rktt = ' ‚ñ´Ô∏è<i> üßß –†–µ–¥–∫–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else: 
            rktt = ''

        if self.get('k'):
            kk = ' ‚ñ´Ô∏è<i> üì¶ –ö–µ–π—Å—ã</i>\n'
        else:
            kk = ''

        if self.get('rk'):
            rkk = ' ‚ñ´Ô∏è<i> üó≥ –†–µ–¥–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            rkk = ''

        if self.get('mif'):
            miff = ' ‚ñ´Ô∏è<i> üïã –ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            miff = ''

        if self.get('ps'):
            psss = ' ‚ñ´Ô∏è<i> üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å —Å –≠—Å–∫–∏–∑–∞–º–∏</i>\n'
        else:
            psss = ''

        if self.get('ss'):
            ssss = ' ‚ñ´Ô∏è<i> üëú –°—É–º–∫–∞ —Å –ü—Ä–µ–¥–º–µ—Ç–∞–º–∏</i>\n'
        else:
            ssss = ''

        if self.get('kr'):
            krr = ' ‚ñ´Ô∏è<i> üíé –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            krr = ""

        if self.get('dk'):
            dkk = " ‚ñ´Ô∏è<i> üé≤ –î–∞–π—Å –ö–µ–π—Å</i>\n"
        else:
            dkk = ''
        
        if self.get('zv'):
            zvv = ' ‚ñ´Ô∏è<i> üåå –ó–≤—ë–∑–¥–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            zvv = ""
        await call.edit(
            text=f"<b>–õ–æ–≥–≥–∏—Ä—É–µ–º—ã–µ –∫–µ–π—Å—ã:</b>\n{ktt}{rktt}{kk}{rkk}{miff}{psss}{ssss}{krr}{dkk}{zvv}",
            reply_markup=[
            [
                {
                    "text": "‚úâÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç",
                    "callback": self.ikt,
                },
                {
                    "text": "üßß –†–µ–¥–∫–∏–π –ö–æ–Ω–≤–µ—Ä—Ç",
                    "callback": self.irkt,
                },
            ],
            [
                {
                    "text": "üì¶ –ö–µ–π—Å",
                    "callback": self.ik,
                },
                {
                    "text": "üó≥ –†–µ–¥–∫–∏–π –ö–µ–π—Å",
                    "callback": self.irk,
                },
            ],
            [
                {
                    "text": "üïã –ú–∏—Ñ–∏—á–µ—Å–∫–∏–π",
                    "callback": self.imif,
                },
                {
                    "text": "üíé –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π",
                    "callback": self.ikr,
                },
            ],
            [
                {
                    "text": "üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å",
                    "callback": self.ips, 
                },
                {
                    "text": "üëú –°—É–º–∫–∞",
                    "callback": self.iss
                }
            ],
            [
                {
                    "text" : "üé≤ –î–∞–π—Å",
                    'callback' : self.idk,
                },
                {
                    "text": "üåå –ó–≤—ë–∑–¥–Ω—ã–π –ö–µ–π—Å",
                    "callback": self.izv,
                },
            ],
            [
                {
                    "text": "üîô –ù–∞–∑–∞–¥",
                    "callback": self.iback,
                }
            ],
        ]           
    )

    
    async def ips(self, call: InlineCall):
        self.set('ps', not self.get('ps'))
        if self.get('kt'):
            ktt = ' ‚ñ´Ô∏è<i> ‚úâÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else:
            ktt = ''

        if self.get('rkt'):
            rktt = ' ‚ñ´Ô∏è<i> üßß –†–µ–¥–∫–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else: 
            rktt = ''

        if self.get('k'):
            kk = ' ‚ñ´Ô∏è<i> üì¶ –ö–µ–π—Å—ã</i>\n'
        else:
            kk = ''

        if self.get('rk'):
            rkk = ' ‚ñ´Ô∏è<i> üó≥ –†–µ–¥–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            rkk = ''

        if self.get('mif'):
            miff = ' ‚ñ´Ô∏è<i> üïã –ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            miff = ''

        if self.get('ps'):
            psss = ' ‚ñ´Ô∏è<i> üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å —Å –≠—Å–∫–∏–∑–∞–º–∏</i>\n'
        else:
            psss = ''

        if self.get('ss'):
            ssss = ' ‚ñ´Ô∏è<i> üëú –°—É–º–∫–∞ —Å –ü—Ä–µ–¥–º–µ—Ç–∞–º–∏</i>\n'
        else:
            ssss = ''

        if self.get('kr'):
            krr = ' ‚ñ´Ô∏è<i> üíé –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            krr = ""

        if self.get('dk'):
            dkk = " ‚ñ´Ô∏è<i> üé≤ –î–∞–π—Å –ö–µ–π—Å</i>\n"
        else:
            dkk = ''
        
        if self.get('zv'):
            zvv = ' ‚ñ´Ô∏è<i> üåå –ó–≤—ë–∑–¥–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            zvv = ""
        await call.edit(
            text=f"<b>–õ–æ–≥–≥–∏—Ä—É–µ–º—ã–µ –∫–µ–π—Å—ã:</b>\n{ktt}{rktt}{kk}{rkk}{miff}{psss}{ssss}{krr}{dkk}{zvv}",
            reply_markup=[
            [
                {
                    "text": "‚úâÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç",
                    "callback": self.ikt,
                },
                {
                    "text": "üßß –†–µ–¥–∫–∏–π –ö–æ–Ω–≤–µ—Ä—Ç",
                    "callback": self.irkt,
                },
            ],
            [
                {
                    "text": "üì¶ –ö–µ–π—Å",
                    "callback": self.ik,
                },
                {
                    "text": "üó≥ –†–µ–¥–∫–∏–π –ö–µ–π—Å",
                    "callback": self.irk,
                },
            ],
            [
                {
                    "text": "üïã –ú–∏—Ñ–∏—á–µ—Å–∫–∏–π",
                    "callback": self.imif,
                },
                {
                    "text": "üíé –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π",
                    "callback": self.ikr,
                },
            ],
            [
                {
                    "text": "üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å",
                    "callback": self.ips, 
                },
                {
                    "text": "üëú –°—É–º–∫–∞",
                    "callback": self.iss
                }
            ],
            [
                {
                    "text" : "üé≤ –î–∞–π—Å",
                    'callback' : self.idk,
                },
                {
                    "text": "üåå –ó–≤—ë–∑–¥–Ω—ã–π –ö–µ–π—Å",
                    "callback": self.izv,
                },
            ],
            [
                {
                    "text": "üîô –ù–∞–∑–∞–¥",
                    "callback": self.iback,
                }
            ],
        ]           
    )
        
    async def iss(self, call: InlineCall):
        self.set('ss', not self.get('ss'))
        if self.get('kt'):
            ktt = ' ‚ñ´Ô∏è<i> ‚úâÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else:
            ktt = ''

        if self.get('rkt'):
            rktt = ' ‚ñ´Ô∏è<i> üßß –†–µ–¥–∫–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else: 
            rktt = ''

        if self.get('k'):
            kk = ' ‚ñ´Ô∏è<i> üì¶ –ö–µ–π—Å—ã</i>\n'
        else:
            kk = ''

        if self.get('rk'):
            rkk = ' ‚ñ´Ô∏è<i> üó≥ –†–µ–¥–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            rkk = ''

        if self.get('mif'):
            miff = ' ‚ñ´Ô∏è<i> üïã –ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            miff = ''

        if self.get('ps'):
            psss = ' ‚ñ´Ô∏è<i> üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å —Å –≠—Å–∫–∏–∑–∞–º–∏</i>\n'
        else:
            psss = ''

        if self.get('ss'):
            ssss = ' ‚ñ´Ô∏è<i> üëú –°—É–º–∫–∞ —Å –ü—Ä–µ–¥–º–µ—Ç–∞–º–∏</i>\n'
        else:
            ssss = ''

        if self.get('kr'):
            krr = ' ‚ñ´Ô∏è<i> üíé –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            krr = ""

        if self.get('dk'):
            dkk = " ‚ñ´Ô∏è<i> üé≤ –î–∞–π—Å –ö–µ–π—Å</i>\n"
        else:
            dkk = ''
        
        if self.get('zv'):
            zvv = ' ‚ñ´Ô∏è<i> üåå –ó–≤—ë–∑–¥–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            zvv = ""
        await call.edit(
            text=f"<b>–õ–æ–≥–≥–∏—Ä—É–µ–º—ã–µ –∫–µ–π—Å—ã:</b>\n{ktt}{rktt}{kk}{rkk}{miff}{psss}{ssss}{krr}{dkk}{zvv}",
            reply_markup=[
            [
                {
                    "text": "‚úâÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç",
                    "callback": self.ikt,
                },
                {
                    "text": "üßß –†–µ–¥–∫–∏–π –ö–æ–Ω–≤–µ—Ä—Ç",
                    "callback": self.irkt,
                },
            ],
            [
                {
                    "text": "üì¶ –ö–µ–π—Å",
                    "callback": self.ik,
                },
                {
                    "text": "üó≥ –†–µ–¥–∫–∏–π –ö–µ–π—Å",
                    "callback": self.irk,
                },
            ],
            [
                {
                    "text": "üïã –ú–∏—Ñ–∏—á–µ—Å–∫–∏–π",
                    "callback": self.imif,
                },
                {
                    "text": "üíé –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π",
                    "callback": self.ikr,
                },
            ],
            [
                {
                    "text": "üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å",
                    "callback": self.ips, 
                },
                {
                    "text": "üëú –°—É–º–∫–∞",
                    "callback": self.iss
                }
            ],
            [
                {
                    "text" : "üé≤ –î–∞–π—Å",
                    'callback' : self.idk,
                },
                {
                    "text": "üåå –ó–≤—ë–∑–¥–Ω—ã–π –ö–µ–π—Å",
                    "callback": self.izv,
                },
            ],
            [
                {
                    "text": "üîô –ù–∞–∑–∞–¥",
                    "callback": self.iback,
                }
            ],
        ]           
    )
        
    async def irkt(self, call: InlineCall):
        self.set('rkt', not self.get('rkt'))
        if self.get('kt'):
            ktt = ' ‚ñ´Ô∏è<i> ‚úâÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else:
            ktt = ''

        if self.get('rkt'):
            rktt = ' ‚ñ´Ô∏è<i> üßß –†–µ–¥–∫–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else: 
            rktt = ''

        if self.get('k'):
            kk = ' ‚ñ´Ô∏è<i> üì¶ –ö–µ–π—Å—ã</i>\n'
        else:
            kk = ''

        if self.get('rk'):
            rkk = ' ‚ñ´Ô∏è<i> üó≥ –†–µ–¥–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            rkk = ''

        if self.get('mif'):
            miff = ' ‚ñ´Ô∏è<i> üïã –ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            miff = ''

        if self.get('ps'):
            psss = ' ‚ñ´Ô∏è<i> üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å —Å –≠—Å–∫–∏–∑–∞–º–∏</i>\n'
        else:
            psss = ''

        if self.get('ss'):
            ssss = ' ‚ñ´Ô∏è<i> üëú –°—É–º–∫–∞ —Å –ü—Ä–µ–¥–º–µ—Ç–∞–º–∏</i>\n'
        else:
            ssss = ''

        if self.get('kr'):
            krr = ' ‚ñ´Ô∏è<i> üíé –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            krr = ""

        if self.get('dk'):
            dkk = " ‚ñ´Ô∏è<i> üé≤ –î–∞–π—Å –ö–µ–π—Å</i>\n"
        else:
            dkk = ''
        
        if self.get('zv'):
            zvv = ' ‚ñ´Ô∏è<i> üåå –ó–≤—ë–∑–¥–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            zvv = ""
        await call.edit(
            text=f"<b>–õ–æ–≥–≥–∏—Ä—É–µ–º—ã–µ –∫–µ–π—Å—ã:</b>\n{ktt}{rktt}{kk}{rkk}{miff}{psss}{ssss}{krr}{dkk}{zvv}",
            reply_markup=[
            [
                {
                    "text": "‚úâÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç",
                    "callback": self.ikt,
                },
                {
                    "text": "üßß –†–µ–¥–∫–∏–π –ö–æ–Ω–≤–µ—Ä—Ç",
                    "callback": self.irkt,
                },
            ],
            [
                {
                    "text": "üì¶ –ö–µ–π—Å",
                    "callback": self.ik,
                },
                {
                    "text": "üó≥ –†–µ–¥–∫–∏–π –ö–µ–π—Å",
                    "callback": self.irk,
                },
            ],
            [
                {
                    "text": "üïã –ú–∏—Ñ–∏—á–µ—Å–∫–∏–π",
                    "callback": self.imif,
                },
                {
                    "text": "üíé –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π",
                    "callback": self.ikr,
                },
            ],
            [
                {
                    "text": "üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å",
                    "callback": self.ips, 
                },
                {
                    "text": "üëú –°—É–º–∫–∞",
                    "callback": self.iss
                }
            ],
            [
                {
                    "text" : "üé≤ –î–∞–π—Å",
                    'callback' : self.idk,
                },
                {
                    "text": "üåå –ó–≤—ë–∑–¥–Ω—ã–π –ö–µ–π—Å",
                    "callback": self.izv,
                },
            ],
            [
                {
                    "text": "üîô –ù–∞–∑–∞–¥",
                    "callback": self.iback,
                }
            ],
        ]           
    )


    async def ik(self, call: InlineCall):
        self.set('k', not self.get('k'))
        if self.get('kt'):
            ktt = ' ‚ñ´Ô∏è<i> ‚úâÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else:
            ktt = ''

        if self.get('rkt'):
            rktt = ' ‚ñ´Ô∏è<i> üßß –†–µ–¥–∫–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else: 
            rktt = ''

        if self.get('k'):
            kk = ' ‚ñ´Ô∏è<i> üì¶ –ö–µ–π—Å—ã</i>\n'
        else:
            kk = ''

        if self.get('rk'):
            rkk = ' ‚ñ´Ô∏è<i> üó≥ –†–µ–¥–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            rkk = ''

        if self.get('mif'):
            miff = ' ‚ñ´Ô∏è<i> üïã –ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            miff = ''

        if self.get('ps'):
            psss = ' ‚ñ´Ô∏è<i> üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å —Å –≠—Å–∫–∏–∑–∞–º–∏</i>\n'
        else:
            psss = ''

        if self.get('ss'):
            ssss = ' ‚ñ´Ô∏è<i> üëú –°—É–º–∫–∞ —Å –ü—Ä–µ–¥–º–µ—Ç–∞–º–∏</i>\n'
        else:
            ssss = ''

        if self.get('kr'):
            krr = ' ‚ñ´Ô∏è<i> üíé –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            krr = ""

        if self.get('dk'):
            dkk = " ‚ñ´Ô∏è<i> üé≤ –î–∞–π—Å –ö–µ–π—Å</i>\n"
        else:
            dkk = ''
        
        if self.get('zv'):
            zvv = ' ‚ñ´Ô∏è<i> üåå –ó–≤—ë–∑–¥–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            zvv = ""
        await call.edit(
            text=f"<b>–õ–æ–≥–≥–∏—Ä—É–µ–º—ã–µ –∫–µ–π—Å—ã:</b>\n{ktt}{rktt}{kk}{rkk}{miff}{psss}{ssss}{krr}{dkk}{zvv}",
            reply_markup=[
            [
                {
                    "text": "‚úâÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç",
                    "callback": self.ikt,
                },
                {
                    "text": "üßß –†–µ–¥–∫–∏–π –ö–æ–Ω–≤–µ—Ä—Ç",
                    "callback": self.irkt,
                },
            ],
            [
                {
                    "text": "üì¶ –ö–µ–π—Å",
                    "callback": self.ik,
                },
                {
                    "text": "üó≥ –†–µ–¥–∫–∏–π –ö–µ–π—Å",
                    "callback": self.irk,
                },
            ],
            [
                {
                    "text": "üïã –ú–∏—Ñ–∏—á–µ—Å–∫–∏–π",
                    "callback": self.imif,
                },
                {
                    "text": "üíé –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π",
                    "callback": self.ikr,
                },
            ],
            [
                {
                    "text": "üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å",
                    "callback": self.ips, 
                },
                {
                    "text": "üëú –°—É–º–∫–∞",
                    "callback": self.iss
                }
            ],
            [
                {
                    "text" : "üé≤ –î–∞–π—Å",
                    'callback' : self.idk,
                },
                {
                    "text": "üåå –ó–≤—ë–∑–¥–Ω—ã–π –ö–µ–π—Å",
                    "callback": self.izv,
                },
            ],
            [
                {
                    "text": "üîô –ù–∞–∑–∞–¥",
                    "callback": self.iback,
                }
            ],
        ]           
    )


    async def irk(self, call: InlineCall):
        self.set('rk', not self.get('rk'))
        if self.get('kt'):
            ktt = ' ‚ñ´Ô∏è<i> ‚úâÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else:
            ktt = ''

        if self.get('rkt'):
            rktt = ' ‚ñ´Ô∏è<i> üßß –†–µ–¥–∫–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else: 
            rktt = ''

        if self.get('k'):
            kk = ' ‚ñ´Ô∏è<i> üì¶ –ö–µ–π—Å—ã</i>\n'
        else:
            kk = ''

        if self.get('rk'):
            rkk = ' ‚ñ´Ô∏è<i> üó≥ –†–µ–¥–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            rkk = ''

        if self.get('mif'):
            miff = ' ‚ñ´Ô∏è<i> üïã –ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            miff = ''

        if self.get('ps'):
            psss = ' ‚ñ´Ô∏è<i> üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å —Å –≠—Å–∫–∏–∑–∞–º–∏</i>\n'
        else:
            psss = ''

        if self.get('ss'):
            ssss = ' ‚ñ´Ô∏è<i> üëú –°—É–º–∫–∞ —Å –ü—Ä–µ–¥–º–µ—Ç–∞–º–∏</i>\n'
        else:
            ssss = ''

        if self.get('kr'):
            krr = ' ‚ñ´Ô∏è<i> üíé –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            krr = ""

        if self.get('dk'):
            dkk = " ‚ñ´Ô∏è<i> üé≤ –î–∞–π—Å –ö–µ–π—Å</i>\n"
        else:
            dkk = ''
        
        if self.get('zv'):
            zvv = ' ‚ñ´Ô∏è<i> üåå –ó–≤—ë–∑–¥–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            zvv = ""
        await call.edit(
            text=f"<b>–õ–æ–≥–≥–∏—Ä—É–µ–º—ã–µ –∫–µ–π—Å—ã:</b>\n{ktt}{rktt}{kk}{rkk}{miff}{psss}{ssss}{krr}{dkk}{zvv}",
            reply_markup=[
            [
                {
                    "text": "‚úâÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç",
                    "callback": self.ikt,
                },
                {
                    "text": "üßß –†–µ–¥–∫–∏–π –ö–æ–Ω–≤–µ—Ä—Ç",
                    "callback": self.irkt,
                },
            ],
            [
                {
                    "text": "üì¶ –ö–µ–π—Å",
                    "callback": self.ik,
                },
                {
                    "text": "üó≥ –†–µ–¥–∫–∏–π –ö–µ–π—Å",
                    "callback": self.irk,
                },
            ],
            [
                {
                    "text": "üïã –ú–∏—Ñ–∏—á–µ—Å–∫–∏–π",
                    "callback": self.imif,
                },
                {
                    "text": "üíé –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π",
                    "callback": self.ikr,
                },
            ],
            [
                {
                    "text": "üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å",
                    "callback": self.ips, 
                },
                {
                    "text": "üëú –°—É–º–∫–∞",
                    "callback": self.iss
                }
            ],
            [
                {
                    "text" : "üé≤ –î–∞–π—Å",
                    'callback' : self.idk,
                },
                {
                    "text": "üåå –ó–≤—ë–∑–¥–Ω—ã–π –ö–µ–π—Å",
                    "callback": self.izv,
                },
            ],
            [
                {
                    "text": "üîô –ù–∞–∑–∞–¥",
                    "callback": self.iback,
                }
            ],
        ]           
    )


    async def imif(self, call: InlineCall):
        self.set('mif', not self.get('mif'))
        if self.get('kt'):
            ktt = ' ‚ñ´Ô∏è<i> ‚úâÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else:
            ktt = ''

        if self.get('rkt'):
            rktt = ' ‚ñ´Ô∏è<i> üßß –†–µ–¥–∫–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else: 
            rktt = ''

        if self.get('k'):
            kk = ' ‚ñ´Ô∏è<i> üì¶ –ö–µ–π—Å—ã</i>\n'
        else:
            kk = ''

        if self.get('rk'):
            rkk = ' ‚ñ´Ô∏è<i> üó≥ –†–µ–¥–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            rkk = ''

        if self.get('mif'):
            miff = ' ‚ñ´Ô∏è<i> üïã –ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            miff = ''

        if self.get('ps'):
            psss = ' ‚ñ´Ô∏è<i> üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å —Å –≠—Å–∫–∏–∑–∞–º–∏</i>\n'
        else:
            psss = ''

        if self.get('ss'):
            ssss = ' ‚ñ´Ô∏è<i> üëú –°—É–º–∫–∞ —Å –ü—Ä–µ–¥–º–µ—Ç–∞–º–∏</i>\n'
        else:
            ssss = ''

        if self.get('kr'):
            krr = ' ‚ñ´Ô∏è<i> üíé –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            krr = ""

        if self.get('dk'):
            dkk = " ‚ñ´Ô∏è<i> üé≤ –î–∞–π—Å –ö–µ–π—Å</i>\n"
        else:
            dkk = ''
        
        if self.get('zv'):
            zvv = ' ‚ñ´Ô∏è<i> üåå –ó–≤—ë–∑–¥–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            zvv = ""
        await call.edit(
            text=f"<b>–õ–æ–≥–≥–∏—Ä—É–µ–º—ã–µ –∫–µ–π—Å—ã:</b>\n{ktt}{rktt}{kk}{rkk}{miff}{psss}{ssss}{krr}{dkk}{zvv}",
            reply_markup=[
            [
                {
                    "text": "‚úâÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç",
                    "callback": self.ikt,
                },
                {
                    "text": "üßß –†–µ–¥–∫–∏–π –ö–æ–Ω–≤–µ—Ä—Ç",
                    "callback": self.irkt,
                },
            ],
            [
                {
                    "text": "üì¶ –ö–µ–π—Å",
                    "callback": self.ik,
                },
                {
                    "text": "üó≥ –†–µ–¥–∫–∏–π –ö–µ–π—Å",
                    "callback": self.irk,
                },
            ],
            [
                {
                    "text": "üïã –ú–∏—Ñ–∏—á–µ—Å–∫–∏–π",
                    "callback": self.imif,
                },
                {
                    "text": "üíé –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π",
                    "callback": self.ikr,
                },
            ],
            [
                {
                    "text": "üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å",
                    "callback": self.ips, 
                },
                {
                    "text": "üëú –°—É–º–∫–∞",
                    "callback": self.iss
                }
            ],
            [
                {
                    "text" : "üé≤ –î–∞–π—Å",
                    'callback' : self.idk,
                },
                {
                    "text": "üåå –ó–≤—ë–∑–¥–Ω—ã–π –ö–µ–π—Å",
                    "callback": self.izv,
                },
            ],
            [
                {
                    "text": "üîô –ù–∞–∑–∞–¥",
                    "callback": self.iback,
                }
            ],
        ]           
    )

    async def ikr(self, call: InlineCall):
        self.set('kr', not self.get('kr'))
        if self.get('kt'):
            ktt = ' ‚ñ´Ô∏è<i> ‚úâÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else:
            ktt = ''

        if self.get('rkt'):
            rktt = ' ‚ñ´Ô∏è<i> üßß –†–µ–¥–∫–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else: 
            rktt = ''

        if self.get('k'):
            kk = ' ‚ñ´Ô∏è<i> üì¶ –ö–µ–π—Å—ã</i>\n'
        else:
            kk = ''

        if self.get('rk'):
            rkk = ' ‚ñ´Ô∏è<i> üó≥ –†–µ–¥–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            rkk = ''

        if self.get('mif'):
            miff = ' ‚ñ´Ô∏è<i> üïã –ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            miff = ''

        if self.get('ps'):
            psss = ' ‚ñ´Ô∏è<i> üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å —Å –≠—Å–∫–∏–∑–∞–º–∏</i>\n'
        else:
            psss = ''

        if self.get('ss'):
            ssss = ' ‚ñ´Ô∏è<i> üëú –°—É–º–∫–∞ —Å –ü—Ä–µ–¥–º–µ—Ç–∞–º–∏</i>\n'
        else:
            ssss = ''

        if self.get('kr'):
            krr = ' ‚ñ´Ô∏è<i> üíé –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            krr = ""

        if self.get('dk'):
            dkk = " ‚ñ´Ô∏è<i> üé≤ –î–∞–π—Å –ö–µ–π—Å</i>\n"
        else:
            dkk = ''
        
        if self.get('zv'):
            zvv = ' ‚ñ´Ô∏è<i> üåå –ó–≤—ë–∑–¥–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            zvv = ""
        await call.edit(
            text=f"<b>–õ–æ–≥–≥–∏—Ä—É–µ–º—ã–µ –∫–µ–π—Å—ã:</b>\n{ktt}{rktt}{kk}{rkk}{miff}{psss}{ssss}{krr}{dkk}{zvv}",
            reply_markup=[
            [
                {
                    "text": "‚úâÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç",
                    "callback": self.ikt,
                },
                {
                    "text": "üßß –†–µ–¥–∫–∏–π –ö–æ–Ω–≤–µ—Ä—Ç",
                    "callback": self.irkt,
                },
            ],
            [
                {
                    "text": "üì¶ –ö–µ–π—Å",
                    "callback": self.ik,
                },
                {
                    "text": "üó≥ –†–µ–¥–∫–∏–π –ö–µ–π—Å",
                    "callback": self.irk,
                },
            ],
            [
                {
                    "text": "üïã –ú–∏—Ñ–∏—á–µ—Å–∫–∏–π",
                    "callback": self.imif,
                },
                {
                    "text": "üíé –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π",
                    "callback": self.ikr,
                },
            ],
            [
                {
                    "text": "üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å",
                    "callback": self.ips, 
                },
                {
                    "text": "üëú –°—É–º–∫–∞",
                    "callback": self.iss
                }
            ],
            [
                {
                    "text" : "üé≤ –î–∞–π—Å",
                    'callback' : self.idk,
                },
                {
                    "text": "üåå –ó–≤—ë–∑–¥–Ω—ã–π –ö–µ–π—Å",
                    "callback": self.izv,
                },
            ],
            [
                {
                    "text": "üîô –ù–∞–∑–∞–¥",
                    "callback": self.iback,
                }
            ],
        ]           
    )


    async def izv(self, call: InlineCall):
        self.set('zv', not self.get('zv'))
        if self.get('kt'):
            ktt = ' ‚ñ´Ô∏è<i> ‚úâÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else:
            ktt = ''

        if self.get('rkt'):
            rktt = ' ‚ñ´Ô∏è<i> üßß –†–µ–¥–∫–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else: 
            rktt = ''

        if self.get('k'):
            kk = ' ‚ñ´Ô∏è<i> üì¶ –ö–µ–π—Å—ã</i>\n'
        else:
            kk = ''

        if self.get('rk'):
            rkk = ' ‚ñ´Ô∏è<i> üó≥ –†–µ–¥–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            rkk = ''

        if self.get('mif'):
            miff = ' ‚ñ´Ô∏è<i> üïã –ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            miff = ''

        if self.get('ps'):
            psss = ' ‚ñ´Ô∏è<i> üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å —Å –≠—Å–∫–∏–∑–∞–º–∏</i>\n'
        else:
            psss = ''

        if self.get('ss'):
            ssss = ' ‚ñ´Ô∏è<i> üëú –°—É–º–∫–∞ —Å –ü—Ä–µ–¥–º–µ—Ç–∞–º–∏</i>\n'
        else:
            ssss = ''

        if self.get('kr'):
            krr = ' ‚ñ´Ô∏è<i> üíé –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            krr = ""

        if self.get('dk'):
            dkk = " ‚ñ´Ô∏è<i> üé≤ –î–∞–π—Å –ö–µ–π—Å</i>\n"
        else:
            dkk = ''
        
        if self.get('zv'):
            zvv = ' ‚ñ´Ô∏è<i> üåå –ó–≤—ë–∑–¥–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            zvv = ""
        await call.edit(
            text=f"<b>–õ–æ–≥–≥–∏—Ä—É–µ–º—ã–µ –∫–µ–π—Å—ã:</b>\n{ktt}{rktt}{kk}{rkk}{miff}{psss}{ssss}{krr}{dkk}{zvv}",
            reply_markup=[
            [
                {
                    "text": "‚úâÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç",
                    "callback": self.ikt,
                },
                {
                    "text": "üßß –†–µ–¥–∫–∏–π –ö–æ–Ω–≤–µ—Ä—Ç",
                    "callback": self.irkt,
                },
            ],
            [
                {
                    "text": "üì¶ –ö–µ–π—Å",
                    "callback": self.ik,
                },
                {
                    "text": "üó≥ –†–µ–¥–∫–∏–π –ö–µ–π—Å",
                    "callback": self.irk,
                },
            ],
            [
                {
                    "text": "üïã –ú–∏—Ñ–∏—á–µ—Å–∫–∏–π",
                    "callback": self.imif,
                },
                {
                    "text": "üíé –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π",
                    "callback": self.ikr,
                },
            ],
            [
                {
                    "text": "üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å",
                    "callback": self.ips, 
                },
                {
                    "text": "üëú –°—É–º–∫–∞",
                    "callback": self.iss
                }
            ],
            [
                {
                    "text" : "üé≤ –î–∞–π—Å",
                    'callback' : self.idk,
                },
                {
                    "text": "üåå –ó–≤—ë–∑–¥–Ω—ã–π –ö–µ–π—Å",
                    "callback": self.izv,
                },
            ],
            [
                {
                    "text": "üîô –ù–∞–∑–∞–¥",
                    "callback": self.iback,
                }
            ],
        ]           
    )

    async def idk(self,call:InlineCall):
        self.set('dk', not self.get('dk'))
        if self.get('kt'):
            ktt = ' ‚ñ´Ô∏è<i> ‚úâÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else:
            ktt = ''

        if self.get('rkt'):
            rktt = ' ‚ñ´Ô∏è<i> üßß –†–µ–¥–∫–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else: 
            rktt = ''

        if self.get('k'):
            kk = ' ‚ñ´Ô∏è<i> üì¶ –ö–µ–π—Å—ã</i>\n'
        else:
            kk = ''

        if self.get('rk'):
            rkk = ' ‚ñ´Ô∏è<i> üó≥ –†–µ–¥–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            rkk = ''

        if self.get('mif'):
            miff = ' ‚ñ´Ô∏è<i> üïã –ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            miff = ''

        if self.get('ps'):
            psss = ' ‚ñ´Ô∏è<i> üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å —Å –≠—Å–∫–∏–∑–∞–º–∏</i>\n'
        else:
            psss = ''

        if self.get('ss'):
            ssss = ' ‚ñ´Ô∏è<i> üëú –°—É–º–∫–∞ —Å –ü—Ä–µ–¥–º–µ—Ç–∞–º–∏</i>\n'
        else:
            ssss = ''

        if self.get('kr'):
            krr = ' ‚ñ´Ô∏è<i> üíé –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            krr = ""

        if self.get('dk'):
            dkk = " ‚ñ´Ô∏è<i> üé≤ –î–∞–π—Å –ö–µ–π—Å</i>\n"
        else:
            dkk = ''
        
        if self.get('zv'):
            zvv = ' ‚ñ´Ô∏è<i> üåå –ó–≤—ë–∑–¥–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            zvv = ""
        await call.edit(
            text=f"<b>–õ–æ–≥–≥–∏—Ä—É–µ–º—ã–µ –∫–µ–π—Å—ã:</b>\n{ktt}{rktt}{kk}{rkk}{miff}{psss}{ssss}{krr}{dkk}{zvv}",
            reply_markup=[
            [
                {
                    "text": "‚úâÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç",
                    "callback": self.ikt,
                },
                {
                    "text": "üßß –†–µ–¥–∫–∏–π –ö–æ–Ω–≤–µ—Ä—Ç",
                    "callback": self.irkt,
                },
            ],
            [
                {
                    "text": "üì¶ –ö–µ–π—Å",
                    "callback": self.ik,
                },
                {
                    "text": "üó≥ –†–µ–¥–∫–∏–π –ö–µ–π—Å",
                    "callback": self.irk,
                },
            ],
            [
                {
                    "text": "üïã –ú–∏—Ñ–∏—á–µ—Å–∫–∏–π",
                    "callback": self.imif,
                },
                {
                    "text": "üíé –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π",
                    "callback": self.ikr,
                },
            ],
            [
                {
                    "text": "üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å",
                    "callback": self.ips, 
                },
                {
                    "text": "üëú –°—É–º–∫–∞",
                    "callback": self.iss
                }
            ],
            [
                {
                    "text" : "üé≤ –î–∞–π—Å",
                    'callback' : self.idk,
                },
                {
                    "text": "üåå –ó–≤—ë–∑–¥–Ω—ã–π –ö–µ–π—Å",
                    "callback": self.izv,
                },
            ],
            [
                {
                    "text": "üîô –ù–∞–∑–∞–¥",
                    "callback": self.iback,
                }
            ],
        ]           
    )


    async def itrade(self, call: InlineCall):

        if self.get('tradec'):
            tradee = ' ‚ñ´Ô∏è<i> üì¶ –ü–µ—Ä–µ–¥–∞—á–∞ –∫–µ–π—Å–æ–≤</i>\n'
        else:
            tradee = ''

        if self.get('tradei'):
            tradeii = ' ‚ñ´Ô∏è<i> ü™Ñ –ü–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤</i>\n'
        else:
            tradeii = ''
        await call.edit(
                text=f"<b>–¢—Ä–µ–π–¥—ã:</b>\n{tradee}{tradeii}",
                reply_markup=[
                    [
                        {
                            "text" : "üì¶ –ö–µ–π—Å—ã",
                            "callback" : self.itcase,
                        },
                        {
                            "text" : "ü™Ñ –ü—Ä–µ–¥–º–µ—Ç—ã",
                            "callback" : self.ititem,
                        }
                    ],
                    [
                        {
                            "text": "üîô –ù–∞–∑–∞–¥",
                            "callback": self.iback,
                        }
                    ],
                ],
          )   

    async def itcase(self, call: InlineCall):
        self.set("tradec", not self.get('tradec'))
        if self.get('tradec'):
            tradee = ' ‚ñ´Ô∏è<i> üì¶ –ü–µ—Ä–µ–¥–∞—á–∞ –∫–µ–π—Å–æ–≤</i>\n'
        else:
            tradee = ''

        if self.get('tradei'):
            tradeii = ' ‚ñ´Ô∏è<i> ü™Ñ –ü–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤</i>\n'
        else:
            tradeii = ''
        await call.edit(
                text=f"<b>–¢—Ä–µ–π–¥—ã:</b>\n{tradee}{tradeii}",
                reply_markup=[
                    [
                        {
                            "text" : "üì¶ –ö–µ–π—Å—ã",
                            "callback" : self.itcase,
                        },
                        {
                            "text" : "ü™Ñ –ü—Ä–µ–¥–º–µ—Ç—ã",
                            "callback" : self.ititem,
                        }
                    ],
                    [
                        {
                            "text": "üîô –ù–∞–∑–∞–¥",
                            "callback": self.iback,
                        }
                    ],
                ]
        )

    async def ititem(self, call: InlineCall):
        self.set("tradei", not self.get('tradei'))
        if self.get('tradec'):
            tradee = ' ‚ñ´Ô∏è<i> üì¶ –ü–µ—Ä–µ–¥–∞—á–∞ –∫–µ–π—Å–æ–≤</i>\n'
        else:
            tradee = ''

        if self.get('tradei'):
            tradeii = ' ‚ñ´Ô∏è<i> ü™Ñ –ü–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤</i>\n'
        else:
            tradeii = ''
        await call.edit(
                text=f"<b>–¢—Ä–µ–π–¥—ã:</b>\n{tradee}{tradeii}",
                reply_markup=[
                    [
                        {
                            "text" : "üì¶ –ö–µ–π—Å—ã",
                            "callback" : self.itcase,
                        },
                        {
                            "text" : "ü™Ñ –ü—Ä–µ–¥–º–µ—Ç—ã",
                            "callback" : self.ititem, 
                        }
                    ],
                    [
                        {
                            "text": "üîô –ù–∞–∑–∞–¥",
                            "callback": self.iback,
                        }
                    ],
                ]
        )

    async def iboss(self, call: InlineCall):
        self.set('bosses', not self.get('bosses'))
        if self.get('kt'):
            ktt = ' ‚ñ´Ô∏è<i> ‚úâÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else:
            ktt = ''

        if self.get('rkt'):
            rktt = ' ‚ñ´Ô∏è<i> üßß –†–µ–¥–∫–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else: 
            rktt = ''

        if self.get('k'):
            kk = ' ‚ñ´Ô∏è<i> üì¶ –ö–µ–π—Å—ã</i>\n'
        else:
            kk = ''

        if self.get('rk'):
            rkk = ' ‚ñ´Ô∏è<i> üó≥ –†–µ–¥–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            rkk = ''

        if self.get('mif'):
            miff = ' ‚ñ´Ô∏è<i> üïã –ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            miff = ''

        if self.get('ps'):
            psss = ' ‚ñ´Ô∏è<i> üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å —Å –≠—Å–∫–∏–∑–∞–º–∏</i>\n'
        else:
            psss = ''

        if self.get('ss'):
            ssss = ' ‚ñ´Ô∏è<i> üëú –°—É–º–∫–∞ —Å –ü—Ä–µ–¥–º–µ—Ç–∞–º–∏</i>\n'
        else:
            ssss = ''

        if self.get('kr'):
            krr = ' ‚ñ´Ô∏è<i> üíé –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            krr = ""

        if self.get('dk'):
            dkk = " ‚ñ´Ô∏è<i> üé≤ –î–∞–π—Å –ö–µ–π—Å</i>\n"
        else:
            dkk = ''
        
        if self.get('zv'):
            zvv = ' ‚ñ´Ô∏è<i> üåå –ó–≤—ë–∑–¥–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            zvv = ""

        if self.get('credits'):
            crd = ' ‚ñ´Ô∏è<i> üí≥ –ö—Ä–µ–¥–∏—Ç—ã</i>\n'
        else:
            crd = ''

        if self.get('boosters'):
            bosst = ' ‚ñ´Ô∏è<i> ‚ö°Ô∏è –ë—É—Å—Ç—ã </i>\n'
        else:
            bosst = ""

        if self.get('tradec'):
            tradee = ' ‚ñ´Ô∏è<i> üì¶ –ü–µ—Ä–µ–¥–∞—á–∞ –∫–µ–π—Å–æ–≤</i>\n'
        else:
            tradee = ''

        if self.get('tradei'):
            tradeii = ' ‚ñ´Ô∏è<i> ü™Ñ –ü–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤</i>\n'
        else:
            tradeii = ''

        if self.get('bosses'):
            bosss = ' ‚ñ´Ô∏è<i> üó° –ë–æ—Å—Å—ã </i>\n'
        else:
            bosss = ''
        await call.edit(
                text=f"<b>–õ–æ–≥–≥–∏—Ä—É–µ–º—ã–µ –∫–µ–π—Å—ã:</b>\n{ktt}{rktt}{kk}{rkk}{miff}{psss}{ssss}{krr}{dkk}{zvv}\n<b>–¢—Ä–µ–π–¥—ã:</b>\n{tradee}{tradeii}\n<b>–†–µ—Å—É—Ä—Å—ã:</b>\n{crd}{bosst}{bosss}",
                reply_markup=[
                        [
                            {
                                "text": "üì¶ –ö–µ–π—Å—ã",
                                "callback": self.icases,
                            },
                            {
                                "text" : "‚ö°Ô∏è –ë—É—Å—Ç—ã",
                                "callback" : self.iboost,
                            },
                            {
                                "text" : "‚ôªÔ∏è –¢—Ä–µ–π–¥—ã",
                                "callback" : self.itrade,
                            },
                    ],
                    [
                            {
                                "text": "üó° –ë–æ—Å—Å—ã",
                                "callback": self.iboss,
                            },
                            {
                                'text' : "üí≥ –ö—Ä–µ–¥–∏—Ç—ã",
                                'callback' : self.icrd,
                            },
                    ],
                    [
                            {
                                "text": "üîª –ó–∞–∫—Ä—ã—Ç—å",
                                "action" : "close",
                            }
                    ],
                ],
          )   

    async def iboost(self, call: InlineCall):
        self.set('boosters', not self.get('boosters'))
        if self.get('kt'):
            ktt = ' ‚ñ´Ô∏è<i> ‚úâÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else:
            ktt = ''

        if self.get('rkt'):
            rktt = ' ‚ñ´Ô∏è<i> üßß –†–µ–¥–∫–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else: 
            rktt = ''

        if self.get('k'):
            kk = ' ‚ñ´Ô∏è<i> üì¶ –ö–µ–π—Å—ã</i>\n'
        else:
            kk = ''

        if self.get('rk'):
            rkk = ' ‚ñ´Ô∏è<i> üó≥ –†–µ–¥–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            rkk = ''

        if self.get('mif'):
            miff = ' ‚ñ´Ô∏è<i> üïã –ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            miff = ''

        if self.get('ps'):
            psss = ' ‚ñ´Ô∏è<i> üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å —Å –≠—Å–∫–∏–∑–∞–º–∏</i>\n'
        else:
            psss = ''

        if self.get('ss'):
            ssss = ' ‚ñ´Ô∏è<i> üëú –°—É–º–∫–∞ —Å –ü—Ä–µ–¥–º–µ—Ç–∞–º–∏</i>\n'
        else:
            ssss = ''

        if self.get('kr'):
            krr = ' ‚ñ´Ô∏è<i> üíé –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            krr = ""

        if self.get('dk'):
            dkk = " ‚ñ´Ô∏è<i> üé≤ –î–∞–π—Å –ö–µ–π—Å</i>\n"
        else:
            dkk = ''
        
        if self.get('zv'):
            zvv = ' ‚ñ´Ô∏è<i> üåå –ó–≤—ë–∑–¥–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            zvv = ""

        if self.get('credits'):
            crd = ' ‚ñ´Ô∏è<i> üí≥ –ö—Ä–µ–¥–∏—Ç—ã</i>\n'
        else:
            crd = ''

        if self.get('boosters'):
            bosst = ' ‚ñ´Ô∏è<i> ‚ö°Ô∏è –ë—É—Å—Ç—ã </i>\n'
        else:
            bosst = ""

        if self.get('tradec'):
            tradee = ' ‚ñ´Ô∏è<i> üì¶ –ü–µ—Ä–µ–¥–∞—á–∞ –∫–µ–π—Å–æ–≤</i>\n'
        else:
            tradee = ''

        if self.get('tradei'):
            tradeii = ' ‚ñ´Ô∏è<i> ü™Ñ –ü–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤</i>\n'
        else:
            tradeii = ''

        if self.get('bosses'):
            bosss = ' ‚ñ´Ô∏è<i> üó° –ë–æ—Å—Å—ã </i>\n'
        else:
            bosss = ''
        await call.edit(
                text=f"<b>–õ–æ–≥–≥–∏—Ä—É–µ–º—ã–µ –∫–µ–π—Å—ã:</b>\n{ktt}{rktt}{kk}{rkk}{miff}{psss}{ssss}{krr}{dkk}{zvv}\n<b>–¢—Ä–µ–π–¥—ã:</b>\n{tradee}{tradeii}\n<b>–†–µ—Å—É—Ä—Å—ã:</b>\n{crd}{bosst}{bosss}",
                reply_markup=[
                        [
                            {
                                "text": "üì¶ –ö–µ–π—Å—ã",
                                "callback": self.icases,
                            },
                            {
                                "text" : "‚ö°Ô∏è –ë—É—Å—Ç—ã",
                                "callback" : self.iboost,
                            },
                            {
                                "text" : "‚ôªÔ∏è –¢—Ä–µ–π–¥—ã",
                                "callback" : self.itrade,
                            },
                    ],
                    [
                            {
                                "text": "üó° –ë–æ—Å—Å—ã",
                                "callback": self.iboss,
                            },
                            {
                                'text' : "üí≥ –ö—Ä–µ–¥–∏—Ç—ã",
                                'callback' : self.icrd,
                            },
                    ],
                    [
                            {
                                "text": "üîª –ó–∞–∫—Ä—ã—Ç—å",
                                "action" : "close",
                            }
                    ],
                ],
          )   
    async def iback(self, call: InlineCall):
        if self.get('kt'):
            ktt = ' ‚ñ´Ô∏è<i> ‚úâÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else:
            ktt = ''

        if self.get('rkt'):
            rktt = ' ‚ñ´Ô∏è<i> üßß –†–µ–¥–∫–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç—ã</i>\n'
        else: 
            rktt = ''

        if self.get('k'):
            kk = ' ‚ñ´Ô∏è<i> üì¶ –ö–µ–π—Å—ã</i>\n'
        else:
            kk = ''

        if self.get('rk'):
            rkk = ' ‚ñ´Ô∏è<i> üó≥ –†–µ–¥–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            rkk = ''

        if self.get('mif'):
            miff = ' ‚ñ´Ô∏è<i> üïã –ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ö–µ–π—Å—ã</i>\n'
        else:
            miff = ''

        if self.get('ps'):
            psss = ' ‚ñ´Ô∏è<i> üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å —Å –≠—Å–∫–∏–∑–∞–º–∏</i>\n'
        else:
            psss = ''

        if self.get('ss'):
            ssss = ' ‚ñ´Ô∏è<i> üëú –°—É–º–∫–∞ —Å –ü—Ä–µ–¥–º–µ—Ç–∞–º–∏</i>\n'
        else:
            ssss = ''

        if self.get('kr'):
            krr = ' ‚ñ´Ô∏è<i> üíé –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            krr = ""

        if self.get('dk'):
            dkk = " ‚ñ´Ô∏è<i> üé≤ –î–∞–π—Å –ö–µ–π—Å</i>\n"
        else:
            dkk = ''
        
        if self.get('zv'):
            zvv = ' ‚ñ´Ô∏è<i> üåå –ó–≤—ë–∑–¥–Ω—ã–µ –ö–µ–π—Å—ã</i>\n'
        else:
            zvv = ""

        if self.get('credits'):
            crd = ' ‚ñ´Ô∏è<i> üí≥ –ö—Ä–µ–¥–∏—Ç—ã</i>\n'
        else:
            crd = ''

        if self.get('boosters'):
            bosst = ' ‚ñ´Ô∏è<i> ‚ö°Ô∏è –ë—É—Å—Ç—ã </i>\n'
        else:
            bosst = ""

        if self.get('tradec'):
            tradee = ' ‚ñ´Ô∏è<i> üì¶ –ü–µ—Ä–µ–¥–∞—á–∞ –∫–µ–π—Å–æ–≤</i>\n'
        else:
            tradee = ''

        if self.get('tradei'):
            tradeii = ' ‚ñ´Ô∏è<i> ü™Ñ –ü–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤</i>\n'
        else:
            tradeii = ''

        if self.get('bosses'):
            bosss = ' ‚ñ´Ô∏è<i> üó° –ë–æ—Å—Å—ã </i>\n'
        else:
            bosss = ''
        await call.edit(
                text=f"<b>–õ–æ–≥–≥–∏—Ä—É–µ–º—ã–µ –∫–µ–π—Å—ã:</b>\n{ktt}{rktt}{kk}{rkk}{miff}{psss}{ssss}{krr}{dkk}{zvv}\n<b>–¢—Ä–µ–π–¥—ã:</b>\n{tradee}{tradeii}\n<b>–†–µ—Å—É—Ä—Å—ã:</b>\n{crd}{bosst}{bosss}",
                reply_markup=[
                        [
                            {
                                "text": "üì¶ –ö–µ–π—Å—ã",
                                "callback": self.icases,
                            },
                            {
                                "text" : "‚ö°Ô∏è –ë—É—Å—Ç—ã",
                                "callback" : self.iboost,
                            },
                            {
                                "text" : "‚ôªÔ∏è –¢—Ä–µ–π–¥—ã",
                                "callback" : self.itrade,
                            },
                    ],
                    [
                            {
                                "text": "üó° –ë–æ—Å—Å—ã",
                                "callback": self.iboss,
                            },
                            {
                                'text' : "üí≥ –ö—Ä–µ–¥–∏—Ç—ã",
                                'callback' : self.icrd,
                            },
                    ],
                    [
                            {
                                "text": "üîª –ó–∞–∫—Ä—ã—Ç—å",
                                "action" : "close",
                            }
                    ],
                ],
          )   
                            