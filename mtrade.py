from asyncio import sleep
from .. import loader, utils
import asyncio
from telethon.tl.types import Message, ChatAdminRights
from telethon import functions, TelegramClient, errors, events
import inspect
from random import randint
import re


cases = {
    "1": ["‚úâ"],
    "2": ["‚úâ", "üßß"],
    "3": ["‚úâ", "üßß", "üì¶"],
    "4": ["‚úâ", "üßß", "üì¶", "üó≥"]
}

class mtrade(loader.Module):

    @loader.command()
    async def ts(self, m: Message):
        '''- –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏–µ —Ç—Ä–µ–π–¥–æ–≤'''
        self.set('trade', not self.get('trade', False))
        text = '–ê–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏–µ —Ç—Ä–µ–π–¥–æ–≤ –≤–∫–ª—é—á–µ–Ω–æ' if self.get('trade') else "–ê–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏–µ —Ç—Ä–µ–π–¥–æ–≤ –≤—ã–∫–ª—é—á–µ–Ω–æ"
        await utils.answer(m, text)

    @loader.watcher()
    async def trade_handler(self, m: Message):

        if "–¢—Ä–µ–π–¥" in m.raw_text and "–∏–≥—Ä–æ–∫–∞" in m.raw_text:
            if self.get('trade') and m.chat_id == -1002101809770:
                pattern_from = "–¢—Ä–µ–π–¥–µ—Ä –æ—Ç–¥–∞—Å—Ç —Å–≤–æ–∏:\n(.*?) —à—Ç."
                find_from = re.search(pattern_from, m.raw_text, re.DOTALL)
                
                pattern_me = "–í–∑–∞–º–µ–Ω –Ω–∞ —Ç–≤–æ–∏:\n(.*?) —à—Ç."
                find_me = re.search(pattern_me, m.raw_text, re.DOTALL)

                find_from_text = find_from.group(1).split(' ')
                case_from = find_from_text[0]
                quantity_from = int(find_from_text[1])

                find_me_text = find_me.group(1).split(' ')
                case_me = find_me_text[0]
                quantity_me = int(find_me_text[1])

                pattern_nick = "–∏–≥—Ä–æ–∫–∞\n(.*?):"
                nickname = re.search(pattern_nick, m.raw_text, re.DOTALL)
                
                d = quantity_from - quantity_me if quantity_from > quantity_me else quantity_me - quantity_from 

                if nickname:
                    if nickname.group(1) not in self.get('traders', []):
                        if d == 1 and case_from == case_me and case_from in self.get('cases'):
                            click = await m.click(0)
                            print(click)
                            if click:
                                traders = self.get('traders', [])
                                if nickname.group(1) not in traders:
                                    traders.append(nickname.group(1))
                                self.set('traders', traders)
            

    @loader.command()
    async def sc(self, m: Message):
        '''- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∏–¥ –∫–µ–π—Å–æ–≤\n1 - —Ç–æ–ª—å–∫–æ –∫—Ç\2 - –∫—Ç –∏ —Ä–∫—Ç\n–∏ —Ç.–¥. –ú–∞–∫—Å–∏–º—É–º —Ä–∫'''
        args = utils.get_args_raw(m)
        self.set("cases", cases.get(args))
        await utils.answer(m, f"<b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–µ–π—Å—ã:</b>\n{' '.join(self.get('cases'))}")

    @loader.command()
    async def clear(self, m: Message):
        '''- –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö, —Å –∫–µ–º —Ç—Ä–µ–π–¥–∏–ª–∏—Å—å'''
        self.set('traders', [])

    @loader.command()
    async def tsh(self, m: Message):
        '''- –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö, —Å –∫–µ–º —Ç—Ä–µ–π–¥–∏–ª–∏—Å—å'''
        await utils.answer(m, '\n'.join(self.get('traders', [])))